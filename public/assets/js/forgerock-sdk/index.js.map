{"version":3,"sources":["webpack://forgerock/webpack/universalModuleDefinition","webpack://forgerock/./src/auth/enums.ts","webpack://forgerock/./src/auth/index.ts","webpack://forgerock/./src/config/constants.ts","webpack://forgerock/./src/config/enums.ts","webpack://forgerock/./src/config/index.ts","webpack://forgerock/./src/event/helpers.ts","webpack://forgerock/./src/event/index.ts","webpack://forgerock/./src/fr-auth/callbacks/attribute-input-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/choice-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/confirmation-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/device-profile-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/factory.ts","webpack://forgerock/./src/fr-auth/callbacks/hidden-value-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/index.ts","webpack://forgerock/./src/fr-auth/callbacks/kba-create-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/metadata-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/name-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/password-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/polling-wait-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/recaptcha-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/redirect-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/select-idp-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/suspended-text-output-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/terms-and-conditions-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/text-output-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/validated-create-password-callback.ts","webpack://forgerock/./src/fr-auth/callbacks/validated-create-username-callback.ts","webpack://forgerock/./src/fr-auth/enums.ts","webpack://forgerock/./src/fr-auth/fr-login-failure.ts","webpack://forgerock/./src/fr-auth/fr-login-success.ts","webpack://forgerock/./src/fr-auth/fr-step.ts","webpack://forgerock/./src/fr-auth/index.ts","webpack://forgerock/./src/fr-device/collector.ts","webpack://forgerock/./src/fr-device/defaults.ts","webpack://forgerock/./src/fr-device/index.ts","webpack://forgerock/./src/fr-policy/enums.ts","webpack://forgerock/./src/fr-policy/helpers.ts","webpack://forgerock/./src/fr-policy/index.ts","webpack://forgerock/./src/fr-policy/message-creator.ts","webpack://forgerock/./src/fr-recovery-codes/index.ts","webpack://forgerock/./src/fr-recovery-codes/script-parser.ts","webpack://forgerock/./src/fr-user/index.ts","webpack://forgerock/./src/fr-webauthn/enums.ts","webpack://forgerock/./src/fr-webauthn/helpers.ts","webpack://forgerock/./src/fr-webauthn/index.ts","webpack://forgerock/./src/fr-webauthn/script-parser.ts","webpack://forgerock/./src/http-client/helpers.ts","webpack://forgerock/./src/http-client/index.ts","webpack://forgerock/./src/index.ts","webpack://forgerock/./src/oauth2-client/enums.ts","webpack://forgerock/./src/oauth2-client/index.ts","webpack://forgerock/./src/session-manager/index.ts","webpack://forgerock/./src/shared/constants.ts","webpack://forgerock/./src/token-manager/index.ts","webpack://forgerock/./src/token-storage/constants.ts","webpack://forgerock/./src/token-storage/index.ts","webpack://forgerock/./src/token-storage/indexed-db.ts","webpack://forgerock/./src/token-storage/local-storage.ts","webpack://forgerock/./src/token-storage/session-storage.ts","webpack://forgerock/./src/user-manager/index.ts","webpack://forgerock/./src/util/deferred.ts","webpack://forgerock/./src/util/http.ts","webpack://forgerock/./src/util/middleware.ts","webpack://forgerock/./src/util/pkce.ts","webpack://forgerock/./src/util/realm.ts","webpack://forgerock/./src/util/storage.ts","webpack://forgerock/./src/util/strings.ts","webpack://forgerock/./src/util/timeout.ts","webpack://forgerock/./src/util/url.ts","webpack://forgerock/webpack/bootstrap","webpack://forgerock/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","ErrorCode","CallbackType","next","previousStep","options","get","realmPath","serverConfig","tree","type","query","url","this","constructUrl","req","URL","init","configureRequest","ActionTypes","Authenticate","StartAuthenticate","withTimeout","fetch","toString","timeout","res","getResponseJson","treeParams","authIndexType","authIndexValue","undefined","params","queryString","Object","keys","length","stringify","path","getEndpointPath","paths","resolve","baseUrl","step","body","JSON","credentials","headers","accept","REQUESTED_WITH","method","contentType","indexOf","json","status","ok","Auth","DEFAULT_TIMEOUT","set","isValid","Error","validateServerConfig","merged","charAt","Config","add","container","listener","push","remove","index","splice","clear","forEach","k","callbacks","addEventListener","removeEventListener","clearEventListeners","dispatchEvent","event","Dispatcher","payload","getName","getOutputByName","getPrompt","isRequired","getFailedPolicies","getPolicies","setValidateOnly","value","setInputValue","setValue","AttributeInputCallback","getDefaultChoice","getChoices","setChoiceIndex","setChoiceValue","ChoiceCallback","getDefaultOption","Number","getMessageType","getOptions","getOptionType","setOptionIndex","setOptionValue","ConfirmationCallback","getMessage","isMetadataRequired","isLocationRequired","setProfile","profile","DeviceProfileCallback","callback","BooleanAttributeInputCallback","HiddenValueCallback","KbaCreateCallback","MetadataCallback","NameCallback","NumberAttributeInputCallback","PasswordCallback","PollingWaitCallback","ReCaptchaCallback","RedirectCallback","SelectIdPCallback","StringAttributeInputCallback","SuspendedTextOutputCallback","TermsAndConditionsCallback","TextOutputCallback","ValidatedCreatePasswordCallback","ValidatedCreateUsernameCallback","getType","getInputValue","selector","getArrayElement","input","getOutputValue","output","name","defaultValue","find","x","array","test","exec","FRCallback","getPredefinedQuestions","setQuestion","question","setAnswer","answer","endsWith","getData","setName","setPassword","password","getWaitTime","getSiteKey","setResult","result","getRedirectUrl","getProviders","setProvider","item","provider","getTerms","getVersion","getCreateDate","date","Date","setAccepted","accepted","StepType","LoginFailure","getCode","code","getDetail","detail","message","getProcessedMessage","messageCreator","parseErrors","getReason","reason","FRLoginFailure","LoginSuccess","getRealm","realm","getSessionToken","tokenId","getSuccessUrl","successUrl","FRLoginSuccess","callbackFactory","Step","convertCallbacks","getCallbackOfType","getCallbacksOfType","filter","setCallbackValue","getDescription","description","getHeader","header","getStage","stage","map","FRStep","nextPayload","authId","redirect","redirectUrl","window","localStorage","setItem","previousStepKey","location","assign","resume","parsedUrl","searchParams","form_post_entry","nonce","scope","state","suspendedId","redirectStepString","getItem","parse","err","removeItem","nextOptions","start","FRAuth","reduceToObject","props","src","reduce","prev","curr","includes","propArr","split","prop1","prop2","prop","reduceToString","filename","Collector","browserProps","configurableCategories","delay","devicePlatforms","mac","windows","ios","displayProps","fontNames","hardwareProps","platformProps","config","key","getBrowserMeta","navigator","console","warn","getBrowserPluginsNames","plugins","getDeviceName","userAgent","platform","getDisplayMeta","screen","getHardwareMeta","getIdentifier","crypto","getRandomValues","id","Uint32Array","join","getInstalledFonts","canvas","document","createElement","context","getContext","text","font","baseWidth","measureText","width","getLocationCoordinates","geolocation","Promise","getCurrentPosition","position","latitude","coords","longitude","error","enableHighAccuracy","maximumAge","getOSMeta","getProfile","metadata","identifier","hardware","display","browser","deviceName","fonts","timezone","getTimezoneOffset","FRDevice","PolicyKey","getProp","obj","errors","failedPolicyRequirements","apply","messages","parseFailedPolicyRequirement","failedPolicy","policyRequirements","policyRequirement","parsePolicyRequirement","property","policy","policyObject","default","UnknownPolicy","FRPolicy","defaultMessageCreator","CannotContainCharacters","CannotContainDuplicates","CannotContainOthers","LeastCapitalLetters","numCaps","plural","LeastNumbers","numNums","MatchRegexp","MaximumLength","maxLength","MaximumNumber","MinimumLength","minLength","MinimumNumber","Required","Unique","ValidArrayItems","ValidDate","ValidEmailAddress","ValidNameFormat","ValidNumber","ValidPhoneFormat","ValidQueryFilter","ValidType","getCodes","getDisplayCallback","parseDisplayRecoveryCodesText","isDisplayStep","cb","FRRecoveryCodes","recoveryCodesMatches","match","Array","isArray","substr","arr","login","handler","info","loginWithUI","ui","getSession","getTokens","forceRenew","getCurrentUser","logout","endSession","revokeToken","deleteTokens","FRUser","WebAuthnOutcome","WebAuthnOutcomeType","WebAuthnStepType","parseNumberArray","matches","ensureArray","arrayBufferToString","arrayBuffer","uint8Array","Uint8Array","TextDecoder","decode","getIndexOne","parseCredentials","idArray","Int8Array","buffer","e","EncodingError","parsePubKeyArray","replace","parseAllowCredentialsArray","parseRelyingPartyId","relyingPartyId","getWebAuthnStepType","outcomeCallback","getOutcomeCallback","metadataCallback","getMetadataCallback","textOutputCallback","getTextOutputCallback","pubKeyCredParams","Registration","Authentication","None","authenticate","getCallbacks","hiddenCallback","outcome","publicKey","meta","createAuthenticationPublicKey","parseWebAuthnAuthenticateText","getAuthenticationCredential","credential","getAuthenticationOutcome","NotSupportedError","Unsupported","DataError","register","createRegistrationPublicKey","parseWebAuthnRegisterText","getRegistrationCredential","getRegistrationOutcome","returnObj","hasOwnProperty","PublicKeyCredential","UnknownError","clientDataJSON","response","assertionResponse","authenticatorData","signature","userHandle","stringOutput","create","attestationResponse","attestationObject","acceptableCredentials","allowCredentials","challenge","userVerification","rpId","allowCredentialsValue","from","atob","c","charCodeAt","pubKeyCredParamsString","excludeCredentials","attestationPreference","authenticatorSelection","relyingPartyName","userId","userName","displayName","rp","attestation","user","FRWebAuthn","txtEncoder","TextEncoder","requireResidentKey","authenticatorAttachment","trim","rpName","userDisplayName","excludeCredentialsString","challengeArr","challengeJSON","encode","allowCredentialsText","str","idArr","idJSON","getXMLValueFromURL","urlString","parser","DOMParser","decodedValue","decodeURIComponent","el","parseFromString","querySelector","innerHTML","advices","tokens","Headers","AuthenticateToServiceConditionAdvice","TransactionConditionAdvice","idToken","updatedURL","txId","append","authzObj","baseURL","customPaths","treeAuthAdvices","txnAuthAdvices","attributeValue","attributeName","fullXML","queryParams","clone","requiresNewToken","resource","actions","attributes","ttl","request","_request","hasIG","newTokenRequired","authorization","handleStep","redirected","examineForIGAuthz","authorizationJSON","normalizeIGJSON","examineForRESTAuthz","normalizeRESTJSON","authzOptions","buildAuthzOptions","authUrl","authInit","initialStep","isAuthzStep","hasAuthzAdvice","stepIterator","addAuthzInfoToURL","addAuthzInfoToHeaders","setAuthHeaders","accessToken","jsonRes","reject","handleNext","bypassAuthentication","HttpClient","OAuth2Client","ResponseType","SessionManager","TokenManager","TokenStorage","UserManager","Deferred","PKCE","LocalStorage","allowedErrors","AuthenticationConsentRequired","AuthorizationTimeout","FailedToFetch","NetworkError","CORSError","createAuthorizeUrl","clientId","redirectUri","requestParams","client_id","redirect_uri","response_type","responseType","verifier","createChallenge","code_challenge","code_challenge_method","getUrl","Authorize","getAuthCodeByIframe","cleanUp","iframe","noop","onLoad","clearTimeout","contentWindow","newHref","href","containsAuthCode","containsAuthError","setTimeout","style","appendChild","getOAuth2Tokens","authorizationCode","grant_type","code_verifier","getBody","responseBody","parseError","responseObject","access_token","id_token","refreshToken","refresh_token","getUserInfo","id_token_hint","isOkOr4xx","token","endpoint","includeToken","getActionType","ExchangeToken","Logout","RevokeToken","UserInfo","error_description","support","storedString","sessionStorage","storedValues","tokenExchange","createVerifier","createState","authorizeUrlOptions","Code","authorizeUrl","mode","parsedQuery","parseQuery","stored","getTokensOptions","DB_NAME","TOKEN_KEY","getClientConfig","tokenStore","onError","openReq","indexedDB","open","onsuccess","objectStoreNames","contains","close","getReq","transaction","objectStore","target","onerror","onupgradeneeded","onSetSuccess","onUpgradeNeeded","createObjectStore","onOpenSuccess","version","txnReq","putReq","put","removeReq","delete","IndexedDBWrapper","tokenString","LocalStorageWrapper","SessionStorageWrapper","promise","Math","floor","middleware","action","freeze","mwareCopy","fn","iterator","shift","createRandomString","sha256","base64UrlEncode","numbers","prototype","slice","call","btoa","String","fromCharCode","subtle","digest","hashBuffer","num","random","getRealmUrlPath","names","unshift","persist","storage","n","singularText","pluralText","effectiveTimeout","race","_","getBaseUrl","port","protocol","hostname","realmUrlPath","defaultPaths","authorize","userInfo","revoke","sessions","startsWith","basePath","pathname","destPath","newPath","fullUrl","v","data","pairs","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"forgerock\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"forgerock\"] = factory();\n\telse\n\t\troot[\"forgerock\"] = factory();\n})(self, function() {\nreturn ","/*\n * @forgerock/javascript-sdk\n *\n * enums.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * Known errors that can occur during authentication.\n */\nenum ErrorCode {\n  BadRequest = 'BAD_REQUEST',\n  Timeout = 'TIMEOUT',\n  Unauthorized = 'UNAUTHORIZED',\n  Unknown = 'UNKNOWN',\n}\n\n/**\n * Types of callbacks directly supported by the SDK.\n */\nenum CallbackType {\n  BooleanAttributeInputCallback = 'BooleanAttributeInputCallback',\n  ChoiceCallback = 'ChoiceCallback',\n  ConfirmationCallback = 'ConfirmationCallback',\n  DeviceProfileCallback = 'DeviceProfileCallback',\n  HiddenValueCallback = 'HiddenValueCallback',\n  KbaCreateCallback = 'KbaCreateCallback',\n  MetadataCallback = 'MetadataCallback',\n  NameCallback = 'NameCallback',\n  NumberAttributeInputCallback = 'NumberAttributeInputCallback',\n  PasswordCallback = 'PasswordCallback',\n  PollingWaitCallback = 'PollingWaitCallback',\n  ReCaptchaCallback = 'ReCaptchaCallback',\n  RedirectCallback = 'RedirectCallback',\n  SelectIdPCallback = 'SelectIdPCallback',\n  StringAttributeInputCallback = 'StringAttributeInputCallback',\n  SuspendedTextOutputCallback = 'SuspendedTextOutputCallback',\n  TermsAndConditionsCallback = 'TermsAndConditionsCallback',\n  TextOutputCallback = 'TextOutputCallback',\n  ValidatedCreatePasswordCallback = 'ValidatedCreatePasswordCallback',\n  ValidatedCreateUsernameCallback = 'ValidatedCreateUsernameCallback',\n}\n\nexport { CallbackType, ErrorCode };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Config, { ServerConfig } from '../config';\nimport { ActionTypes } from '../config/enums';\nimport { REQUESTED_WITH } from '../shared/constants';\nimport { StringDict } from '../shared/interfaces';\nimport { withTimeout } from '../util/timeout';\nimport { getEndpointPath, resolve, stringify } from '../util/url';\nimport { Step, StepOptions } from './interfaces';\nimport middlewareWrapper from '../util/middleware';\n\n/**\n * Provides direct access to the OpenAM authentication tree API.\n */\nabstract class Auth {\n  /**\n   * Gets the next step in the authentication tree.\n   *\n   * @param {Step} previousStep The previous step, including any required input.\n   * @param {StepOptions} options Configuration default overrides.\n   * @return {Step} The next step in the authentication tree.\n   */\n  public static async next(previousStep?: Step, options?: StepOptions): Promise<Step> {\n    const { realmPath, serverConfig, tree, type } = Config.get(options);\n    const query = options ? options.query : {};\n    const url = this.constructUrl(serverConfig, realmPath, tree, query);\n    const req = middlewareWrapper(\n      {\n        url: new URL(url),\n        init: this.configureRequest(previousStep),\n      },\n      previousStep ? ActionTypes.Authenticate : ActionTypes.StartAuthenticate,\n      {\n        tree,\n        type: type ? type : 'service',\n      },\n    );\n    const res = await withTimeout(fetch(req.url.toString(), req.init), serverConfig.timeout);\n    const json = await this.getResponseJson<Step>(res);\n    return json;\n  }\n\n  private static constructUrl(\n    serverConfig: ServerConfig,\n    realmPath?: string,\n    tree?: string,\n    query?: StringDict<string>,\n  ): string {\n    const treeParams = tree ? { authIndexType: 'service', authIndexValue: tree } : undefined;\n    const params: StringDict<string | undefined> = { ...query, ...treeParams };\n    const queryString = Object.keys(params).length > 0 ? `?${stringify(params)}` : '';\n    const path = getEndpointPath('authenticate', realmPath, serverConfig.paths);\n    const url = resolve(serverConfig.baseUrl, `${path}${queryString}`);\n    return url;\n  }\n\n  private static configureRequest(step?: Step): RequestInit {\n    const init: RequestInit = {\n      body: step ? JSON.stringify(step) : undefined,\n      credentials: 'include',\n      headers: {\n        accept: 'application/json',\n        'accept-api-version': 'protocol=1.0,resource=2.1',\n        'content-type': 'application/json',\n        'x-requested-with': REQUESTED_WITH,\n      },\n      method: 'POST',\n    };\n    return init;\n  }\n\n  private static async getResponseJson<T>(res: Response): Promise<T> {\n    const contentType = res.headers.get('content-type');\n    const isJson = contentType && contentType.indexOf('application/json') > -1;\n    const json = isJson ? await res.json() : {};\n    json.status = res.status;\n    json.ok = res.ok;\n    return json;\n  }\n}\n\nexport default Auth;\n","/*\n * @forgerock/javascript-sdk\n *\n * constants.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/** @hidden */\nconst DEFAULT_TIMEOUT = 60 * 1000;\n\nexport { DEFAULT_TIMEOUT };\n","/*\n * @forgerock/javascript-sdk\n *\n * enums.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nexport enum ActionTypes {\n  Authenticate = 'AUTHENTICATE',\n  Authorize = 'AUTHORIZE',\n  Logout = 'LOGOUT',\n  ExchangeToken = 'EXCHANGE_TOKEN',\n  RefreshToken = 'REFRESH_TOKEN',\n  RevokeToken = 'REVOKE_TOKEN',\n  StartAuthenticate = 'START_AUTHENTICATE',\n  UserInfo = 'USER_INFO',\n}\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { DEFAULT_TIMEOUT } from './constants';\nimport { ConfigOptions, ServerConfig, ValidConfigOptions } from './interfaces';\n\n/**\n * Utility for merging configuration defaults with one-off options.\n *\n * Example:\n *\n * ```js\n * // Establish configuration defaults\n * Config.set({\n *   clientId: 'myApp',\n *   serverConfig: { baseUrl: 'https://openam-domain.com/am' },\n *   tree: 'UsernamePassword'\n * });\n *\n * // Specify overrides as needed\n * const configOverrides = { tree: 'PasswordlessWebAuthn' };\n * const step = await FRAuth.next(undefined, configOverrides);\n */\nabstract class Config {\n  private static options: ConfigOptions;\n\n  /**\n   * Sets the default options.\n   *\n   * @param options The options to use as defaults\n   */\n  public static set(options: ConfigOptions): void {\n    if (!this.isValid(options)) {\n      throw new Error('Configuration is invalid');\n    }\n    if (options.serverConfig) {\n      this.validateServerConfig(options.serverConfig);\n    }\n    this.options = { ...options };\n  }\n\n  /**\n   * Merges the provided options with the default options.  Ensures a server configuration exists.\n   *\n   * @param options The options to merge with defaults\n   */\n  public static get(options?: ConfigOptions): ValidConfigOptions {\n    if (!this.options && !options) {\n      throw new Error('Configuration has not been set');\n    }\n\n    const merged = { ...this.options, ...options };\n    if (!merged.serverConfig || !merged.serverConfig.baseUrl) {\n      throw new Error('Server configuration has not been set');\n    }\n\n    return merged as ValidConfigOptions;\n  }\n\n  private static isValid(options: ConfigOptions): boolean {\n    return !!(options && options.serverConfig);\n  }\n\n  private static validateServerConfig(serverConfig: ServerConfig): void {\n    if (!serverConfig.timeout) {\n      serverConfig.timeout = DEFAULT_TIMEOUT;\n    }\n\n    const url = serverConfig.baseUrl;\n    if (url && url.charAt(url.length - 1) !== '/') {\n      serverConfig.baseUrl = url + '/';\n    }\n  }\n}\n\nexport default Config;\nexport { DEFAULT_TIMEOUT, ConfigOptions, ServerConfig, ValidConfigOptions };\n","/*\n * @forgerock/javascript-sdk\n *\n * helpers.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { CallbackContainer, Listener } from './interfaces';\n\n/** @hidden */\nfunction add(container: CallbackContainer, type: string, listener: Listener): void {\n  container[type] = container[type] || [];\n  if (container[type].indexOf(listener) < 0) {\n    container[type].push(listener);\n  }\n}\n\n/** @hidden */\nfunction remove(container: CallbackContainer, type: string, listener: Listener): void {\n  if (!container[type]) {\n    return;\n  }\n  const index = container[type].indexOf(listener);\n  if (index >= 0) {\n    container[type].splice(index, 1);\n  }\n}\n\n/** @hidden */\nfunction clear(container: CallbackContainer, type?: string): void {\n  Object.keys(container).forEach((k: string) => {\n    if (!type || k === type) {\n      delete container[k];\n    }\n  });\n}\n\nexport { add, clear, remove };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { add, clear, remove } from './helpers';\nimport { CallbackContainer, FREvent, Listener } from './interfaces';\n\n/**\n * Event dispatcher for subscribing and publishing categorized events.\n */\nclass Dispatcher {\n  private callbacks: CallbackContainer = {};\n\n  /**\n   * Subscribes to an event type.\n   *\n   * @param type The event type\n   * @param listener The function to subscribe to events of this type\n   */\n  public addEventListener(type: string, listener: Listener): void {\n    add(this.callbacks, type, listener);\n  }\n\n  /**\n   * Unsubscribes from an event type.\n   *\n   * @param type The event type\n   * @param listener The function to unsubscribe from events of this type\n   */\n  public removeEventListener(type: string, listener: Listener): void {\n    remove(this.callbacks, type, listener);\n  }\n\n  /**\n   * Unsubscribes all listener functions to a single event type or all event types.\n   *\n   * @param type The event type, or all event types if not specified\n   */\n  public clearEventListeners(type?: string): void {\n    clear(this.callbacks, type);\n  }\n\n  /**\n   * Publishes an event.\n   *\n   * @param event The event object to publish\n   */\n  public dispatchEvent<T extends FREvent>(event: T): void {\n    if (!this.callbacks[event.type]) {\n      return;\n    }\n    for (const listener of this.callbacks[event.type]) {\n      listener(event);\n    }\n  }\n}\n\nexport default Dispatcher;\nexport { CallbackContainer, FREvent, Listener };\n","/*\n * @forgerock/javascript-sdk\n *\n * attribute-input-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\nimport { StringDict } from '../../shared/interfaces';\n\n/**\n * Represents a callback used to collect attributes.\n *\n * @typeparam T Maps to StringAttributeInputCallback, NumberAttributeInputCallback and\n *     BooleanAttributeInputCallback, respectively\n */\nclass AttributeInputCallback<T extends string | number | boolean> extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the attribute name.\n   */\n  public getName(): string {\n    return this.getOutputByName<string>('name', '');\n  }\n\n  /**\n   * Gets the attribute prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets whether the attribute is required.\n   */\n  public isRequired(): boolean {\n    return this.getOutputByName<boolean>('required', false);\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public getPolicies(): StringDict<any> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return this.getOutputByName<StringDict<any>>('policies', {});\n  }\n\n  /**\n   * Set if validating value only.\n   */\n  public setValidateOnly(value: boolean): void {\n    this.setInputValue(value, /validateOnly/);\n  }\n\n  /**\n   * Sets the attribute's value.\n   */\n  public setValue(value: T): void {\n    this.setInputValue(value);\n  }\n}\n\nexport default AttributeInputCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * choice-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect an answer to a choice.\n */\nclass ChoiceCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the choice's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets the choice's default answer.\n   */\n  public getDefaultChoice(): number {\n    return this.getOutputByName<number>('defaultChoice', 0);\n  }\n\n  /**\n   * Gets the choice's possible answers.\n   */\n  public getChoices(): string[] {\n    return this.getOutputByName<string[]>('choices', []);\n  }\n\n  /**\n   * Sets the choice's answer by index position.\n   */\n  public setChoiceIndex(index: number): void {\n    const length = this.getChoices().length;\n    if (index < 0 || index > length - 1) {\n      throw new Error(`${index} is out of bounds`);\n    }\n    this.setInputValue(index);\n  }\n\n  /**\n   * Sets the choice's answer by value.\n   */\n  public setChoiceValue(value: string): void {\n    const index = this.getChoices().indexOf(value);\n    if (index === -1) {\n      throw new Error(`\"${value}\" is not a valid choice`);\n    }\n    this.setInputValue(index);\n  }\n}\n\nexport default ChoiceCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * confirmation-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a confirmation to a message.\n */\nclass ConfirmationCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the index position of the confirmation's default answer.\n   */\n  public getDefaultOption(): number {\n    return Number(this.getOutputByName<number>('defaultOption', 0));\n  }\n\n  /**\n   * Gets the confirmation's message type.\n   */\n  public getMessageType(): number {\n    return Number(this.getOutputByName<number>('messageType', 0));\n  }\n\n  /**\n   * Gets the confirmation's possible answers.\n   */\n  public getOptions(): string[] {\n    return this.getOutputByName<string[]>('options', []);\n  }\n\n  /**\n   * Gets the confirmation's option type.\n   */\n  public getOptionType(): number {\n    return Number(this.getOutputByName<number>('optionType', 0));\n  }\n\n  /**\n   * Gets the confirmation's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Set option index.\n   */\n  public setOptionIndex(index: number): void {\n    if (index !== 0 && index !== 1) {\n      throw new Error(`\"${index}\" is not a valid choice`);\n    }\n    this.setInputValue(index);\n  }\n\n  /**\n   * Set option value.\n   */\n  public setOptionValue(value: string): void {\n    const index = this.getOptions().indexOf(value);\n    if (index === -1) {\n      throw new Error(`\"${value}\" is not a valid choice`);\n    }\n    this.setInputValue(index);\n  }\n}\n\nexport default ConfirmationCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * device-profile-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\nimport { DeviceProfileData } from '../../fr-device/interfaces';\n\n/**\n * Represents a callback used to collect device profile data.\n */\nclass DeviceProfileCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's data.\n   */\n  public getMessage(): string {\n    return this.getOutputByName<string>('message', '');\n  }\n\n  /**\n   * Does callback require metadata?\n   */\n  public isMetadataRequired(): boolean {\n    return this.getOutputByName<boolean>('metadata', false);\n  }\n\n  /**\n   * Does callback require location data?\n   */\n  public isLocationRequired(): boolean {\n    return this.getOutputByName<boolean>('location', false);\n  }\n\n  /**\n   * Sets the profile.\n   */\n  public setProfile(profile: DeviceProfileData): void {\n    this.setInputValue(JSON.stringify(profile));\n  }\n}\n\nexport default DeviceProfileCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * factory.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { CallbackType } from '../../auth/enums';\nimport { Callback } from '../../auth/interfaces';\nimport AttributeInputCallback from './attribute-input-callback';\nimport ChoiceCallback from './choice-callback';\nimport ConfirmationCallback from './confirmation-callback';\nimport DeviceProfileCallback from './device-profile-callback';\nimport HiddenValueCallback from './hidden-value-callback';\nimport KbaCreateCallback from './kba-create-callback';\nimport MetadataCallback from './metadata-callback';\nimport NameCallback from './name-callback';\nimport PasswordCallback from './password-callback';\nimport PollingWaitCallback from './polling-wait-callback';\nimport ReCaptchaCallback from './recaptcha-callback';\nimport RedirectCallback from './redirect-callback';\nimport SelectIdPCallback from './select-idp-callback';\nimport SuspendedTextOutputCallback from './suspended-text-output-callback';\nimport TermsAndConditionsCallback from './terms-and-conditions-callback';\nimport TextOutputCallback from './text-output-callback';\nimport ValidatedCreatePasswordCallback from './validated-create-password-callback';\nimport ValidatedCreateUsernameCallback from './validated-create-username-callback';\n\ntype FRCallbackFactory = (callback: Callback) => FRCallback;\n\n/**\n * @hidden\n */\nfunction createCallback(callback: Callback): FRCallback {\n  switch (callback.type) {\n    case CallbackType.BooleanAttributeInputCallback:\n      return new AttributeInputCallback<boolean>(callback);\n    case CallbackType.ChoiceCallback:\n      return new ChoiceCallback(callback);\n    case CallbackType.ConfirmationCallback:\n      return new ConfirmationCallback(callback);\n    case CallbackType.DeviceProfileCallback:\n      return new DeviceProfileCallback(callback);\n    case CallbackType.HiddenValueCallback:\n      return new HiddenValueCallback(callback);\n    case CallbackType.KbaCreateCallback:\n      return new KbaCreateCallback(callback);\n    case CallbackType.MetadataCallback:\n      return new MetadataCallback(callback);\n    case CallbackType.NameCallback:\n      return new NameCallback(callback);\n    case CallbackType.NumberAttributeInputCallback:\n      return new AttributeInputCallback<number>(callback);\n    case CallbackType.PasswordCallback:\n      return new PasswordCallback(callback);\n    case CallbackType.PollingWaitCallback:\n      return new PollingWaitCallback(callback);\n    case CallbackType.ReCaptchaCallback:\n      return new ReCaptchaCallback(callback);\n    case CallbackType.RedirectCallback:\n      return new RedirectCallback(callback);\n    case CallbackType.SelectIdPCallback:\n      return new SelectIdPCallback(callback);\n    case CallbackType.StringAttributeInputCallback:\n      return new AttributeInputCallback<string>(callback);\n    case CallbackType.SuspendedTextOutputCallback:\n      return new SuspendedTextOutputCallback(callback);\n    case CallbackType.TermsAndConditionsCallback:\n      return new TermsAndConditionsCallback(callback);\n    case CallbackType.TextOutputCallback:\n      return new TextOutputCallback(callback);\n    case CallbackType.ValidatedCreatePasswordCallback:\n      return new ValidatedCreatePasswordCallback(callback);\n    case CallbackType.ValidatedCreateUsernameCallback:\n      return new ValidatedCreateUsernameCallback(callback);\n    default:\n      return new FRCallback(callback);\n  }\n}\n\nexport default createCallback;\nexport { FRCallbackFactory };\n","/*\n * @forgerock/javascript-sdk\n *\n * hidden-value-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect information indirectly from the user.\n */\nclass HiddenValueCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n}\n\nexport default HiddenValueCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { Callback, NameValue } from '../../auth/interfaces';\n\n/**\n * Base class for authentication tree callback wrappers.\n */\nclass FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {}\n\n  /**\n   * Gets the name of this callback type.\n   */\n  public getType(): string {\n    return this.payload.type;\n  }\n\n  /**\n   * Gets the value of the specified input element, or the first element if `selector` is not\n   * provided.\n   *\n   * @param selector The index position or name of the desired element\n   */\n  public getInputValue(selector: number | string = 0): unknown {\n    return this.getArrayElement(this.payload.input, selector).value;\n  }\n\n  /**\n   * Sets the value of the specified input element, or the first element if `selector` is not\n   * provided.\n   *\n   * @param selector The index position or name of the desired element\n   */\n  public setInputValue(value: unknown, selector: number | string | RegExp = 0): void {\n    this.getArrayElement(this.payload.input, selector).value = value;\n  }\n\n  /**\n   * Gets the value of the specified output element, or the first element if `selector`\n   * is not provided.\n   *\n   * @param selector The index position or name of the desired element\n   */\n  public getOutputValue(selector: number | string = 0): unknown {\n    return this.getArrayElement(this.payload.output, selector).value;\n  }\n\n  /**\n   * Gets the value of the first output element with the specified name or the\n   * specified default value.\n   *\n   * @param name The name of the desired element\n   */\n  public getOutputByName<T>(name: string, defaultValue: T): T {\n    const output = this.payload.output.find((x) => x.name === name);\n    return output ? (output.value as T) : defaultValue;\n  }\n\n  private getArrayElement(\n    array: NameValue[] | undefined,\n    selector: number | string | RegExp = 0,\n  ): NameValue {\n    if (array === undefined) {\n      throw new Error(`No NameValue array was provided to search (selector ${selector})`);\n    }\n\n    if (typeof selector === 'number') {\n      if (selector < 0 || selector > array.length - 1) {\n        throw new Error(`Selector index ${selector} is out of range`);\n      }\n      return array[selector];\n    }\n\n    if (typeof selector === 'string') {\n      const input = array.find((x) => x.name === selector);\n      if (!input) {\n        throw new Error(`Missing callback input entry \"${selector}\"`);\n      }\n      return input;\n    }\n\n    // Duck typing for RegEx\n    if (typeof selector === 'object' && selector.test && selector.exec) {\n      const input = array.find((x) => selector.test(x.name));\n      if (!input) {\n        throw new Error(`Missing callback input entry \"${selector}\"`);\n      }\n      return input;\n    }\n\n    throw new Error('Invalid selector value type');\n  }\n}\n\nexport default FRCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * kba-create-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect KBA-style security questions and answers.\n */\nclass KbaCreateCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets the callback's list of pre-defined security questions.\n   */\n  public getPredefinedQuestions(): string[] {\n    return this.getOutputByName<string[]>('predefinedQuestions', []);\n  }\n\n  /**\n   * Sets the callback's security question.\n   */\n  public setQuestion(question: string): void {\n    this.setValue('question', question);\n  }\n\n  /**\n   * Sets the callback's security question answer.\n   */\n  public setAnswer(answer: string): void {\n    this.setValue('answer', answer);\n  }\n\n  private setValue(type: 'question' | 'answer', value: string): void {\n    if (!this.payload.input) {\n      throw new Error('KBA payload is missing input');\n    }\n\n    const input = this.payload.input.find((x) => x.name.endsWith(type));\n    if (!input) {\n      throw new Error(`No input has name ending in \"${type}\"`);\n    }\n    input.value = value;\n  }\n}\n\nexport default KbaCreateCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * metadata-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to deliver and collect miscellaneous data.\n */\nclass MetadataCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's data.\n   */\n  public getData<T>(): T {\n    return this.getOutputByName<T>('data', {} as T);\n  }\n}\n\nexport default MetadataCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * name-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a username.\n */\nclass NameCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Sets the username.\n   */\n  public setName(name: string): void {\n    this.setInputValue(name);\n  }\n}\n\nexport default NameCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * password-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect a password.\n */\nclass PasswordCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  public getPolicies(): string[] {\n    return this.getOutputByName<string[]>('policies', []);\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Sets the password.\n   */\n  public setPassword(password: string): void {\n    this.setInputValue(password);\n  }\n}\n\nexport default PasswordCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * polling-wait-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to instruct the system to poll while a backend process completes.\n */\nclass PollingWaitCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the message to display while polling.\n   */\n  public getMessage(): string {\n    return this.getOutputByName<string>('message', '');\n  }\n\n  /**\n   * Gets the polling interval in seconds.\n   */\n  public getWaitTime(): number {\n    return Number(this.getOutputByName<number>('waitTime', 0));\n  }\n}\n\nexport default PollingWaitCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * recaptcha-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to integrate reCAPTCHA.\n */\nclass ReCaptchaCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the reCAPTCHA site key.\n   */\n  public getSiteKey(): string {\n    return this.getOutputByName<string>('recaptchaSiteKey', '');\n  }\n\n  /**\n   * Sets the reCAPTCHA result.\n   */\n  public setResult(result: string): void {\n    this.setInputValue(result);\n  }\n}\n\nexport default ReCaptchaCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * redirect-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect an answer to a choice.\n */\nclass RedirectCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the redirect URL.\n   */\n  public getRedirectUrl(): string {\n    return this.getOutputByName<string>('redirectUrl', '');\n  }\n}\n\nexport default RedirectCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * select-idp-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\ninterface IdPValue {\n  provider: string;\n  uiConfig: {\n    [key: string]: string;\n  };\n}\n\n/**\n * Represents a callback used to collect an answer to a choice.\n */\nclass SelectIdPCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the available providers.\n   */\n  public getProviders(): IdPValue[] {\n    return this.getOutputByName<IdPValue[]>('providers', []);\n  }\n\n  /**\n   * Sets the provider by name.\n   */\n  public setProvider(value: string): void {\n    const item = this.getProviders().find((item) => item.provider === value);\n    if (!item) {\n      throw new Error(`\"${value}\" is not a valid choice`);\n    }\n    this.setInputValue(item.provider);\n  }\n}\n\nexport default SelectIdPCallback;\n\nexport { IdPValue };\n","/*\n * @forgerock/javascript-sdk\n *\n * suspended-text-output-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport TextOutputCallback from './text-output-callback';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to display a message.\n */\nclass SuspendedTextOutputCallback extends TextOutputCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n}\n\nexport default SuspendedTextOutputCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * terms-and-conditions-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to collect acceptance of terms and conditions.\n */\nclass TermsAndConditionsCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the terms and conditions content.\n   */\n  public getTerms(): string {\n    return this.getOutputByName<string>('terms', '');\n  }\n\n  /**\n   * Gets the version of the terms and conditions.\n   */\n  public getVersion(): string {\n    return this.getOutputByName<string>('version', '');\n  }\n\n  /**\n   * Gets the date of the terms and conditions.\n   */\n  public getCreateDate(): Date {\n    const date = this.getOutputByName<string>('createDate', '');\n    return new Date(date);\n  }\n\n  /**\n   * Sets the callback's acceptance.\n   */\n  public setAccepted(accepted = true): void {\n    this.setInputValue(accepted);\n  }\n}\n\nexport default TermsAndConditionsCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * text-output-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback } from '../../auth/interfaces';\n\n/**\n * Represents a callback used to display a message.\n */\nclass TextOutputCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the message content.\n   */\n  public getMessage(): string {\n    return this.getOutputByName<string>('message', '');\n  }\n\n  /**\n   * Gets the message type.\n   */\n  public getMessageType(): string {\n    return this.getOutputByName<string>('messageType', '');\n  }\n}\n\nexport default TextOutputCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * validated-create-password-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\nimport { StringDict } from '../../shared/interfaces';\n\n/**\n * Represents a callback used to collect a valid platform password.\n */\nclass ValidatedCreatePasswordCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public getPolicies(): StringDict<any> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return this.getOutputByName<StringDict<any>>('policies', {});\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets whether the password is required.\n   */\n  public isRequired(): boolean {\n    return this.getOutputByName<boolean>('required', false);\n  }\n\n  /**\n   * Sets the callback's password.\n   */\n  public setPassword(password: string): void {\n    this.setInputValue(password);\n  }\n\n  /**\n   * Set if validating value only.\n   */\n  public setValidateOnly(value: boolean): void {\n    this.setInputValue(value, /validateOnly/);\n  }\n}\n\nexport default ValidatedCreatePasswordCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * validated-create-username-callback.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRCallback from '.';\nimport { Callback, PolicyRequirement } from '../../auth/interfaces';\nimport { StringDict } from '../../shared/interfaces';\n\n/**\n * Represents a callback used to collect a valid platform username.\n */\nclass ValidatedCreateUsernameCallback extends FRCallback {\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Callback) {\n    super(payload);\n  }\n\n  /**\n   * Gets the callback's prompt.\n   */\n  public getPrompt(): string {\n    return this.getOutputByName<string>('prompt', '');\n  }\n\n  /**\n   * Gets the callback's failed policies.\n   */\n  public getFailedPolicies(): PolicyRequirement[] {\n    return this.getOutputByName<PolicyRequirement[]>('failedPolicies', []);\n  }\n\n  /**\n   * Gets the callback's applicable policies.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public getPolicies(): StringDict<any> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return this.getOutputByName<StringDict<any>>('policies', {});\n  }\n\n  /**\n   * Gets whether the username is required.\n   */\n  public isRequired(): boolean {\n    return this.getOutputByName<boolean>('required', false);\n  }\n\n  /**\n   * Sets the callback's username.\n   */\n  public setName(name: string): void {\n    this.setInputValue(name);\n  }\n\n  /**\n   * Set if validating value only.\n   */\n  public setValidateOnly(value: boolean): void {\n    this.setInputValue(value, /validateOnly/);\n  }\n}\n\nexport default ValidatedCreateUsernameCallback;\n","/*\n * @forgerock/javascript-sdk\n *\n * enums.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * Types of steps returned by the authentication tree.\n */\nenum StepType {\n  LoginFailure = 'LoginFailure',\n  LoginSuccess = 'LoginSuccess',\n  Step = 'Step',\n}\n\nexport { StepType };\n","/*\n * @forgerock/javascript-sdk\n *\n * fr-login-failure.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport FRPolicy from '../fr-policy';\nimport { MessageCreator, ProcessedPropertyError } from '../fr-policy/interfaces';\nimport { Step } from '../auth/interfaces';\nimport { StepType } from './enums';\nimport { AuthResponse, FailureDetail } from './interfaces';\n\nclass FRLoginFailure implements AuthResponse {\n  /**\n   * The type of step.\n   */\n  public readonly type = StepType.LoginFailure;\n\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Step) {}\n\n  /**\n   * Gets the error code.\n   */\n  public getCode(): number {\n    return Number(this.payload.code);\n  }\n\n  /**\n   * Gets the failure details.\n   */\n  public getDetail(): FailureDetail | undefined {\n    return this.payload.detail;\n  }\n\n  /**\n   * Gets the failure message.\n   */\n  public getMessage(): string | undefined {\n    return this.payload.message;\n  }\n\n  /**\n   * Gets processed failure message.\n   */\n  public getProcessedMessage(messageCreator?: MessageCreator): ProcessedPropertyError[] {\n    return FRPolicy.parseErrors(this.payload, messageCreator);\n  }\n\n  /**\n   * Gets the failure reason.\n   */\n  public getReason(): string | undefined {\n    return this.payload.reason;\n  }\n}\n\nexport default FRLoginFailure;\n","/*\n * @forgerock/javascript-sdk\n *\n * fr-login-success.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { Step } from '../auth/interfaces';\nimport { StepType } from './enums';\nimport { AuthResponse } from './interfaces';\n\nclass FRLoginSuccess implements AuthResponse {\n  /**\n   * The type of step.\n   */\n  public readonly type = StepType.LoginSuccess;\n\n  /**\n   * @param payload The raw payload returned by OpenAM\n   */\n  constructor(public payload: Step) {}\n\n  /**\n   * Gets the step's realm.\n   */\n  public getRealm(): string | undefined {\n    return this.payload.realm;\n  }\n\n  /**\n   * Gets the step's session token.\n   */\n  public getSessionToken(): string | undefined {\n    return this.payload.tokenId;\n  }\n\n  /**\n   * Gets the step's success URL.\n   */\n  public getSuccessUrl(): string | undefined {\n    return this.payload.successUrl;\n  }\n}\n\nexport default FRLoginSuccess;\n","/*\n * @forgerock/javascript-sdk\n *\n * fr-step.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { CallbackType } from '../auth/enums';\nimport { Callback, Step } from '../auth/interfaces';\nimport FRCallback from './callbacks';\nimport createCallback, { FRCallbackFactory } from './callbacks/factory';\nimport { StepType } from './enums';\nimport { AuthResponse } from './interfaces';\n\n/**\n * Represents a single step of an authentication tree.\n */\nclass FRStep implements AuthResponse {\n  /**\n   * The type of step.\n   */\n  public readonly type = StepType.Step;\n\n  /**\n   * The callbacks contained in this step.\n   */\n  public callbacks: FRCallback[] = [];\n\n  /**\n   * @param payload The raw payload returned by OpenAM\n   * @param callbackFactory A function that returns am implementation of FRCallback\n   */\n  constructor(public payload: Step, callbackFactory?: FRCallbackFactory) {\n    if (payload.callbacks) {\n      this.callbacks = this.convertCallbacks(payload.callbacks, callbackFactory);\n    }\n  }\n\n  /**\n   * Gets the first callback of the specified type in this step.\n   *\n   * @param type The type of callback to find.\n   */\n  public getCallbackOfType<T extends FRCallback>(type: CallbackType): T {\n    const callbacks = this.getCallbacksOfType<T>(type);\n    if (callbacks.length !== 1) {\n      throw new Error(`Expected 1 callback of type \"${type}\", but found ${callbacks.length}`);\n    }\n    return callbacks[0];\n  }\n\n  /**\n   * Gets all callbacks of the specified type in this step.\n   *\n   * @param type The type of callback to find.\n   */\n  public getCallbacksOfType<T extends FRCallback>(type: CallbackType): T[] {\n    return this.callbacks.filter((x) => x.getType() === type) as T[];\n  }\n\n  /**\n   * Sets the value of the first callback of the specified type in this step.\n   *\n   * @param type The type of callback to find.\n   * @param value The value to set for the callback.\n   */\n  public setCallbackValue(type: CallbackType, value: unknown): void {\n    const callbacks = this.getCallbacksOfType(type);\n    if (callbacks.length !== 1) {\n      throw new Error(`Expected 1 callback of type \"${type}\", but found ${callbacks.length}`);\n    }\n    callbacks[0].setInputValue(value);\n  }\n\n  /**\n   * Gets the step's description.\n   */\n  public getDescription(): string | undefined {\n    return this.payload.description;\n  }\n\n  /**\n   * Gets the step's header.\n   */\n  public getHeader(): string | undefined {\n    return this.payload.header;\n  }\n\n  /**\n   * Gets the step's stage.\n   */\n  public getStage(): string | undefined {\n    return this.payload.stage;\n  }\n\n  private convertCallbacks(\n    callbacks: Callback[],\n    callbackFactory?: FRCallbackFactory,\n  ): FRCallback[] {\n    const converted = callbacks.map((x: Callback) => {\n      // This gives preference to the provided factory and falls back to our default implementation\n      return (callbackFactory || createCallback)(x) || createCallback(x);\n    });\n    return converted;\n  }\n}\n\n/**\n * A function that can populate the provided authentication tree step.\n */\ntype FRStepHandler = (step: FRStep) => void;\n\nexport default FRStep;\nexport { FRStepHandler };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Auth from '../auth/index';\nimport { CallbackType } from '../auth/enums';\nimport { StepOptions } from '../auth/interfaces';\nimport RedirectCallback from '../fr-auth/callbacks/redirect-callback';\nimport FRLoginFailure from './fr-login-failure';\nimport FRLoginSuccess from './fr-login-success';\nimport FRStep from './fr-step';\n\n/**\n * Provides access to the OpenAM authentication tree API.\n */\nabstract class FRAuth {\n  public static readonly previousStepKey = 'FRAuth_PreviousStep';\n\n  /**\n   * Requests the next step in the authentication tree.\n   *\n   * Call `FRAuth.next()` recursively.  At each step, check for session token or error, otherwise\n   * populate the step's callbacks and call `next()` again.\n   *\n   * Example:\n   *\n   * ```js\n   * async function nextStep(previousStep) {\n   *   const thisStep = await FRAuth.next(previousStep);\n   *\n   *   switch (thisStep.type) {\n   *     case StepType.LoginSuccess:\n   *       const token = thisStep.getSessionToken();\n   *       break;\n   *     case StepType.LoginFailure:\n   *       const detail = thisStep.getDetail();\n   *       break;\n   *     case StepType.Step:\n   *       // Populate `thisStep` callbacks here, and then continue\n   *       thisStep.setInputValue('foo');\n   *       nextStep(thisStep);\n   *       break;\n   *   }\n   * }\n   * ```\n   *\n   * @param previousStep The previous step with its callback values populated\n   * @param options Configuration overrides\n   * @return The next step in the authentication tree\n   */\n  public static async next(\n    previousStep?: FRStep,\n    options?: StepOptions,\n  ): Promise<FRStep | FRLoginSuccess | FRLoginFailure> {\n    const nextPayload = await Auth.next(previousStep ? previousStep.payload : undefined, options);\n\n    if (nextPayload.authId) {\n      // If there's an authId, tree has not been completed\n      const callbackFactory = options ? options.callbackFactory : undefined;\n      return new FRStep(nextPayload, callbackFactory);\n    }\n\n    if (!nextPayload.authId && nextPayload.ok) {\n      // If there's no authId, and the response is OK, tree is complete\n      return new FRLoginSuccess(nextPayload);\n    }\n\n    // If there's no authId, and the response is not OK, tree has failure\n    return new FRLoginFailure(nextPayload);\n  }\n\n  /**\n   * Redirects to the URL identified in the RedirectCallback and saves the full\n   * step information to localStorage for retrieval when user returns from login.\n   *\n   * Example:\n   * ```js\n   * forgerock.FRAuth.redirect(step);\n   * ```\n   */\n  public static redirect(step: FRStep): void {\n    const cb = step.getCallbackOfType(CallbackType.RedirectCallback) as RedirectCallback;\n    const redirectUrl = cb.getRedirectUrl();\n\n    window.localStorage.setItem(this.previousStepKey, JSON.stringify(step));\n    window.location.assign(redirectUrl);\n  }\n\n  /**\n   * Resumes a tree after returning from an external client or provider.\n   * Requires the full URL of the current window. It will parse URL for\n   * key-value pairs as well as, if required, retrieves previous step.\n   *\n   * Example;\n   * ```js\n   * forgerock.FRAuth.resume(window.location.href)\n   * ```\n   */\n  public static async resume(\n    url: string,\n    options?: StepOptions,\n  ): Promise<FRStep | FRLoginSuccess | FRLoginFailure> {\n    const parsedUrl = new URL(url);\n    const code = parsedUrl.searchParams.get('code');\n    const form_post_entry = parsedUrl.searchParams.get('form_post_entry');\n    const nonce = parsedUrl.searchParams.get('nonce');\n    const scope = parsedUrl.searchParams.get('scope');\n    const state = parsedUrl.searchParams.get('state');\n    const suspendedId = parsedUrl.searchParams.get('suspendedId');\n\n    let previousStep;\n\n    function requiresPreviousStep() {\n      return (code && state) || form_post_entry;\n    }\n\n    /**\n     * If we are returning back from a provider, the previous redirect step data is required.\n     * Retrieve the previous step from localStorage, and then delete it to remove stale data.\n     * If suspendedId is present, no previous step data is needed, so skip below conditional.\n     */\n    if (requiresPreviousStep()) {\n      const redirectStepString = window.localStorage.getItem(this.previousStepKey);\n\n      if (!redirectStepString) {\n        throw new Error('Error: could not retrieve original redirect information.');\n      }\n\n      try {\n        previousStep = JSON.parse(redirectStepString);\n      } catch (err) {\n        throw new Error('Error: could not parse redirect params or step information');\n      }\n\n      window.localStorage.removeItem(this.previousStepKey);\n    }\n\n    /**\n     * Construct options object from the options parameter and key-value pairs from URL.\n     * Ensure query parameters from current URL are the last properties spread in the object.\n     */\n    const nextOptions = {\n      ...options,\n      query: {\n        // Conditionally spread properties into object. Don't spread props with undefined/null.\n        ...(options && options.query),\n        ...(code && { code }),\n        ...(form_post_entry && { form_post_entry }),\n        ...(nonce && { nonce }),\n        ...(scope && { scope }),\n        ...(state && { state }),\n        ...(suspendedId && { suspendedId }),\n      },\n    };\n\n    return await this.next(previousStep, nextOptions);\n  }\n\n  /**\n   * Requests the first step in the authentication tree.\n   * This is essentially an alias to calling FRAuth.next without a previous step.\n   *\n   * @param options Configuration overrides\n   * @return The next step in the authentication tree\n   */\n  public static async start(\n    options?: StepOptions,\n  ): Promise<FRStep | FRLoginSuccess | FRLoginFailure> {\n    return await FRAuth.next(undefined, options);\n  }\n}\n\nexport default FRAuth;\n","/*\n * @forgerock/javascript-sdk\n *\n * collector.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { StringDict } from '../shared/interfaces';\n\n/**\n * @class Collector - base class for FRDevice\n * Generic collector functions for collecting a device profile attributes\n */\nclass Collector {\n  /**\n   * @method reduceToObject - goes one to two levels into source to collect attribute\n   * @param props - array of strings; can use dot notation for two level lookup\n   * @param src - source of attributes to check\n   */\n  // eslint-disable-next-line\n  reduceToObject(props: string[], src: StringDict<any>): StringDict<string> {\n    return props.reduce((prev, curr) => {\n      if (curr.includes('.')) {\n        const propArr = curr.split('.');\n        const prop1 = propArr[0];\n        const prop2 = propArr[1];\n        const prop = src[prop1] && src[prop1][prop2];\n        prev[prop2] = prop != undefined ? prop : '';\n      } else {\n        prev[curr] = src[curr] != undefined ? src[curr] : null;\n      }\n      return prev;\n    }, {} as StringDict<string>);\n  }\n\n  /**\n   * @method reduceToString - goes one level into source to collect attribute\n   * @param props - array of strings\n   * @param src - source of attributes to check\n   */\n  // eslint-disable-next-line\n  reduceToString(props: string[], src: any): string {\n    return props.reduce((prev, curr) => {\n      prev = `${prev}${src[curr].filename};`;\n      return prev;\n    }, '');\n  }\n}\n\nexport default Collector;\n","/*\n * @forgerock/javascript-sdk\n *\n * defaults.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nconst browserProps = [\n  'userAgent',\n  'appName',\n  'appCodeName',\n  'appVersion',\n  'appMinorVersion',\n  'buildID',\n  'product',\n  'productSub',\n  'vendor',\n  'vendorSub',\n  'browserLanguage',\n];\nconst configurableCategories = [\n  'fontNames',\n  'displayProps',\n  'browserProps',\n  'hardwareProps',\n  'platformProps',\n];\nconst delay = 30 * 1000;\nconst devicePlatforms = {\n  mac: ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n  windows: ['Win32', 'Win64', 'Windows', 'WinCE'],\n  ios: ['iPhone', 'iPad', 'iPod'],\n};\nconst displayProps = ['width', 'height', 'pixelDepth', 'orientation.angle'];\nconst fontNames = [\n  'cursive',\n  'monospace',\n  'serif',\n  'sans-serif',\n  'fantasy',\n  'Arial',\n  'Arial Black',\n  'Arial Narrow',\n  'Arial Rounded MT Bold',\n  'Bookman Old Style',\n  'Bradley Hand ITC',\n  'Century',\n  'Century Gothic',\n  'Comic Sans MS',\n  'Courier',\n  'Courier New',\n  'Georgia',\n  'Gentium',\n  'Impact',\n  'King',\n  'Lucida Console',\n  'Lalit',\n  'Modena',\n  'Monotype Corsiva',\n  'Papyrus',\n  'Tahoma',\n  'TeX',\n  'Times',\n  'Times New Roman',\n  'Trebuchet MS',\n  'Verdana',\n  'Verona',\n];\nconst hardwareProps = [\n  'cpuClass',\n  'deviceMemory',\n  'hardwareConcurrency',\n  'maxTouchPoints',\n  'oscpu',\n];\nconst platformProps = ['language', 'platform', 'userLanguage', 'systemLanguage'];\n\nexport {\n  browserProps,\n  configurableCategories,\n  delay,\n  devicePlatforms,\n  displayProps,\n  fontNames,\n  hardwareProps,\n  platformProps,\n};\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport {\n  browserProps,\n  configurableCategories,\n  delay,\n  devicePlatforms,\n  displayProps,\n  fontNames,\n  hardwareProps,\n  platformProps,\n} from './defaults';\nimport {\n  BaseProfileConfig,\n  Category,\n  CollectParameters,\n  DeviceProfileData,\n  Geolocation,\n  ProfileConfigOptions,\n} from './interfaces';\nimport Collector from './collector';\n\n/**\n * @class FRDevice - Collects user device metadata\n *\n * Example:\n *\n * ```js\n * // Instantiate new device object (w/optional config, if needed)\n * const device = new forgerock.FRDevice(\n *   // optional configuration\n * );\n * // override any instance methods, if needed\n * // e.g.: device.getDisplayMeta = () => {};\n *\n * // Call getProfile with required argument obj of boolean properties\n * // of location and metadata\n * const profile = await device.getProfile({\n *   location: isLocationRequired,\n *   metadata: isMetadataRequired,\n * });\n * ```\n */\nclass FRDevice extends Collector {\n  config: BaseProfileConfig = {\n    fontNames,\n    devicePlatforms,\n    displayProps,\n    browserProps,\n    hardwareProps,\n    platformProps,\n  };\n\n  constructor(config?: ProfileConfigOptions) {\n    super();\n    if (config) {\n      Object.keys(config).forEach((key: string) => {\n        if (!configurableCategories.includes(key)) {\n          throw new Error('Device profile configuration category does not exist.');\n        }\n        this.config[key as Category] = config[key as Category];\n      });\n    }\n  }\n\n  getBrowserMeta(): { [key: string]: string } {\n    if (!navigator) {\n      console.warn('Cannot collect browser metadata. navigator is not defined.');\n      return {};\n    }\n    return this.reduceToObject(this.config.browserProps, navigator);\n  }\n\n  getBrowserPluginsNames(): string {\n    if (!(navigator && navigator.plugins)) {\n      console.warn('Cannot collect browser plugin information. navigator.plugins is not defined.');\n      return '';\n    }\n    return this.reduceToString(Object.keys(navigator.plugins), navigator.plugins);\n  }\n\n  getDeviceName(): string {\n    if (!navigator) {\n      console.warn('Cannot collect device name. navigator is not defined.');\n      return '';\n    }\n    const userAgent = navigator.userAgent;\n    const platform = navigator.platform;\n\n    switch (true) {\n      case this.config.devicePlatforms.mac.includes(platform):\n        return 'Mac (Browser)';\n      case this.config.devicePlatforms.ios.includes(platform):\n        return `${platform} (Browser)`;\n      case this.config.devicePlatforms.windows.includes(platform):\n        return 'Windows (Browser)';\n      case /Android/.test(platform) || /Android/.test(userAgent):\n        return 'Android (Browser)';\n      case /CrOS/.test(userAgent) || /Chromebook/.test(userAgent):\n        return 'Chrome OS (Browser)';\n      case /Linux/.test(platform):\n        return 'Linux (Browser)';\n      default:\n        return `${platform || 'Unknown'} (Browser)`;\n    }\n  }\n\n  getDisplayMeta(): { [key: string]: string | number | null } {\n    if (!screen) {\n      console.warn('Cannot collect screen information. screen is not defined.');\n    }\n    return this.reduceToObject(this.config.displayProps, screen);\n  }\n\n  getHardwareMeta(): { [key: string]: string } {\n    if (!navigator) {\n      console.warn('Cannot collect OS metadata. Navigator is not defined.');\n      return {};\n    }\n    return this.reduceToObject(this.config.hardwareProps, navigator);\n  }\n\n  getIdentifier(): string {\n    if (!(window.crypto && window.crypto.getRandomValues)) {\n      console.warn('Cannot generate profile ID. Crypto and/or getRandomValues is not supported.');\n      return '';\n    }\n    if (!localStorage) {\n      console.warn('Cannot store profile ID. localStorage is not supported.');\n      return '';\n    }\n    let id = localStorage.getItem('profile-id');\n    if (!id) {\n      // generate ID, 3 sections of random numbers: \"714524572-2799534390-3707617532\"\n      id = window.crypto.getRandomValues(new Uint32Array(3)).join('-');\n      localStorage.setItem('profile-id', id);\n    }\n    return id;\n  }\n\n  getInstalledFonts(): string {\n    const canvas = document.createElement('canvas');\n    if (!canvas) {\n      console.warn('Cannot collect font data. Browser does not support canvas element');\n      return '';\n    }\n    const context = canvas.getContext && canvas.getContext('2d');\n\n    if (!context) {\n      console.warn('Cannot collect font data. Browser does not support 2d canvas context');\n      return '';\n    }\n    const text = 'abcdefghi0123456789';\n    context.font = '72px Comic Sans';\n    const baseWidth = context.measureText(text).width;\n\n    const installedFonts = this.config.fontNames.reduce((prev, curr) => {\n      context.font = `72px ${curr}, Comic Sans`;\n      const newWidth = context.measureText(text).width;\n\n      if (newWidth !== baseWidth) {\n        prev = `${prev}${curr};`;\n      }\n      return prev;\n    }, '');\n\n    return installedFonts;\n  }\n\n  async getLocationCoordinates(): Promise<Geolocation | Record<string, unknown>> {\n    if (!(navigator && navigator.geolocation)) {\n      console.warn('Cannot collect geolocation information. navigator.geolocation is not defined.');\n      return Promise.resolve({});\n    }\n    return new Promise(async (resolve) => {\n      navigator.geolocation.getCurrentPosition(\n        (position) =>\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          }),\n        (error) => {\n          console.warn(\n            'Cannot collect geolocation information. ' + error.code + ': ' + error.message,\n          );\n          resolve({});\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: delay,\n          maximumAge: 0,\n        },\n      );\n    });\n  }\n\n  getOSMeta(): { [key: string]: string } {\n    if (!navigator) {\n      console.warn('Cannot collect OS metadata. navigator is not defined.');\n      return {};\n    }\n    return this.reduceToObject(this.config.platformProps, navigator);\n  }\n\n  async getProfile({ location, metadata }: CollectParameters): Promise<DeviceProfileData> {\n    const profile: DeviceProfileData = {\n      identifier: this.getIdentifier(),\n    };\n\n    if (metadata) {\n      profile.metadata = {\n        hardware: {\n          ...this.getHardwareMeta(),\n          display: this.getDisplayMeta(),\n        },\n        browser: {\n          ...this.getBrowserMeta(),\n          plugins: this.getBrowserPluginsNames(),\n        },\n        platform: {\n          ...this.getOSMeta(),\n          deviceName: this.getDeviceName(),\n          fonts: this.getInstalledFonts(),\n          timezone: this.getTimezoneOffset(),\n        },\n      };\n    }\n    if (location) {\n      profile.location = await this.getLocationCoordinates();\n    }\n    return profile;\n  }\n\n  getTimezoneOffset(): number | null {\n    try {\n      return new Date().getTimezoneOffset();\n    } catch (err) {\n      console.warn('Cannot collect timezone information. getTimezoneOffset is not defined.');\n      return null;\n    }\n  }\n}\n\nexport default FRDevice;\n","/*\n * @forgerock/javascript-sdk\n *\n * enums.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nenum PolicyKey {\n  CannotContainCharacters = 'CANNOT_CONTAIN_CHARACTERS',\n  CannotContainDuplicates = 'CANNOT_CONTAIN_DUPLICATES',\n  CannotContainOthers = 'CANNOT_CONTAIN_OTHERS',\n  LeastCapitalLetters = 'AT_LEAST_X_CAPITAL_LETTERS',\n  LeastNumbers = 'AT_LEAST_X_NUMBERS',\n  MatchRegexp = 'MATCH_REGEXP',\n  MaximumLength = 'MAX_LENGTH',\n  MaximumNumber = 'MAXIMUM_NUMBER_VALUE',\n  MinimumLength = 'MIN_LENGTH',\n  MinimumNumber = 'MINIMUM_NUMBER_VALUE',\n  Required = 'REQUIRED',\n  Unique = 'UNIQUE',\n  UnknownPolicy = 'UNKNOWN_POLICY',\n  ValidArrayItems = 'VALID_ARRAY_ITEMS',\n  ValidDate = 'VALID_DATE',\n  ValidEmailAddress = 'VALID_EMAIL_ADDRESS_FORMAT',\n  ValidNameFormat = 'VALID_NAME_FORMAT',\n  ValidNumber = 'VALID_NUMBER',\n  ValidPhoneFormat = 'VALID_PHONE_FORMAT',\n  ValidQueryFilter = 'VALID_QUERY_FILTER',\n  ValidType = 'VALID_TYPE',\n}\n\nexport { PolicyKey };\n","/*\n * @forgerock/javascript-sdk\n *\n * helpers.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nfunction getProp<T>(obj: { [key: string]: unknown } | undefined, prop: string, defaultValue: T): T {\n  if (!obj || obj[prop] === undefined) {\n    return defaultValue;\n  }\n  return obj[prop] as T;\n}\n\nexport { getProp };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { FailedPolicyRequirement, PolicyRequirement, Step } from '../auth/interfaces';\nimport { PolicyKey } from './enums';\nimport { MessageCreator, ProcessedPropertyError } from './interfaces';\nimport defaultMessageCreator from './message-creator';\n\n/**\n * Utility for processing policy failures into human readable messages.\n *\n * Example:\n *\n * ```js\n * // Create message overrides and extensions as needed\n * const messageCreator = {\n *   [PolicyKey.unique]: (property: string) => (\n *     `this is a custom message for \"UNIQUE\" policy of ${property}`\n *   ),\n *   CUSTOM_POLICY: (property: string, params: any) => (\n *     `this is a custom message for \"${params.policyRequirement}\" policy of ${property}`\n *   ),\n * };\n *\n * const thisStep = await FRAuth.next(previousStep);\n *\n * if (thisStep.type === StepType.LoginFailure) {\n *   const messagesStepMethod = thisStep.getProcessedMessage(messageCreator);\n *   const messagesClassMethod = FRPolicy.parseErrors(thisStep, messageCreator)\n * }\n */\nabstract class FRPolicy {\n  /**\n   * Parses policy errors and generates human readable error messages.\n   *\n   * @param {Step} err The step containing the error.\n   * @param {MessageCreator} messageCreator\n   * Extensible and overridable custom error messages for policy failures.\n   * @return {ProcessedPropertyError[]} Array of objects containing all processed policy errors.\n   */\n  public static parseErrors(\n    err: Partial<Step>,\n    messageCreator?: MessageCreator,\n  ): ProcessedPropertyError[] {\n    const errors: ProcessedPropertyError[] = [];\n    if (err.detail && err.detail.failedPolicyRequirements) {\n      err.detail.failedPolicyRequirements.map((x) => {\n        errors.push.apply(errors, [\n          {\n            detail: x,\n            messages: this.parseFailedPolicyRequirement(x, messageCreator),\n          },\n        ]);\n      });\n    }\n    return errors;\n  }\n\n  /**\n   * Parses a failed policy and returns a string array of error messages.\n   *\n   * @param {FailedPolicyRequirement} failedPolicy The detail data of the failed policy.\n   * @param {MessageCreator} customMessage\n   * Extensible and overridable custom error messages for policy failures.\n   * @return {string[]} Array of strings with all processed policy errors.\n   */\n  public static parseFailedPolicyRequirement(\n    failedPolicy: FailedPolicyRequirement,\n    messageCreator?: MessageCreator,\n  ): string[] {\n    const errors: string[] = [];\n    failedPolicy.policyRequirements.map((policyRequirement) => {\n      errors.push(\n        this.parsePolicyRequirement(failedPolicy.property, policyRequirement, messageCreator),\n      );\n    });\n    return errors;\n  }\n\n  /**\n   * Parses a policy error into a human readable error message.\n   *\n   * @param {string} property The property with the policy failure.\n   * @param {PolicyRequirement} policy The policy failure data.\n   * @param {MessageCreator} customMessage\n   * Extensible and overridable custom error messages for policy failures.\n   * @return {string} Human readable error message.\n   */\n  public static parsePolicyRequirement(\n    property: string,\n    policy: PolicyRequirement,\n    messageCreator: MessageCreator = {},\n  ): string {\n    // AM is returning policy requirement failures as JSON strings\n    const policyObject = typeof policy === 'string' ? JSON.parse(policy) : { ...policy };\n\n    const policyRequirement = policyObject.policyRequirement;\n\n    // Determine which message creator function to use\n    const effectiveMessageCreator =\n      messageCreator[policyRequirement] ||\n      defaultMessageCreator[policyRequirement] ||\n      defaultMessageCreator[PolicyKey.UnknownPolicy];\n\n    // Flatten the parameters and create the message\n    const params = policyObject.params\n      ? { ...policyObject.params, policyRequirement }\n      : { policyRequirement };\n    const message = effectiveMessageCreator(property, params);\n\n    return message;\n  }\n}\n\nexport default FRPolicy;\nexport { PolicyKey, MessageCreator, ProcessedPropertyError };\n","/*\n * @forgerock/javascript-sdk\n *\n * message-creator.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { plural } from '../util/strings';\nimport { PolicyKey } from './enums';\nimport { getProp } from './helpers';\nimport { MessageCreator } from './interfaces';\n\nconst defaultMessageCreator: MessageCreator = {\n  [PolicyKey.CannotContainCharacters]: (property: string, params?: { forbiddenChars?: string }) => {\n    const forbiddenChars = getProp<string>(params, 'forbiddenChars', '');\n    return `${property} must not contain following characters: \"${forbiddenChars}\"`;\n  },\n  [PolicyKey.CannotContainDuplicates]: (property: string, params?: { duplicateValue?: string }) => {\n    const duplicateValue = getProp<string>(params, 'duplicateValue', '');\n    return `${property}  must not contain duplicates: \"${duplicateValue}\"`;\n  },\n  [PolicyKey.CannotContainOthers]: (property: string, params?: { disallowedFields?: string }) => {\n    const disallowedFields = getProp<string>(params, 'disallowedFields', '');\n    return `${property} must not contain: \"${disallowedFields}\"`;\n  },\n  [PolicyKey.LeastCapitalLetters]: (property: string, params?: { numCaps?: number }) => {\n    const numCaps = getProp<number>(params, 'numCaps', 0);\n    return `${property} must contain at least ${numCaps} capital ${plural(numCaps, 'letter')}`;\n  },\n  [PolicyKey.LeastNumbers]: (property: string, params?: { numNums?: number }) => {\n    const numNums = getProp<number>(params, 'numNums', 0);\n    return `${property} must contain at least ${numNums} numeric ${plural(numNums, 'value')}`;\n  },\n  [PolicyKey.MatchRegexp]: (property: string) => `${property} has failed the \"MATCH_REGEXP\" policy`,\n  [PolicyKey.MaximumLength]: (property: string, params?: { maxLength?: number }) => {\n    const maxLength = getProp<number>(params, 'maxLength', 0);\n    return `${property} must be at most ${maxLength} ${plural(maxLength, 'character')}`;\n  },\n  [PolicyKey.MaximumNumber]: (property: string) =>\n    `${property} has failed the \"MAXIMUM_NUMBER_VALUE\" policy`,\n  [PolicyKey.MinimumLength]: (property: string, params?: { minLength?: number }) => {\n    const minLength = getProp<number>(params, 'minLength', 0);\n    return `${property} must be at least ${minLength} ${plural(minLength, 'character')}`;\n  },\n  [PolicyKey.MinimumNumber]: (property: string) =>\n    `${property} has failed the \"MINIMUM_NUMBER_VALUE\" policy`,\n  [PolicyKey.Required]: (property: string) => `${property} is required`,\n  [PolicyKey.Unique]: (property: string) => `${property} must be unique`,\n  [PolicyKey.UnknownPolicy]: (property: string, params?: { policyRequirement?: string }) => {\n    const policyRequirement = getProp<string>(params, 'policyRequirement', 'Unknown');\n    return `${property}: Unknown policy requirement \"${policyRequirement}\"`;\n  },\n  [PolicyKey.ValidArrayItems]: (property: string) =>\n    `${property} has failed the \"VALID_ARRAY_ITEMS\" policy`,\n  [PolicyKey.ValidDate]: (property: string) => `${property} has an invalid date`,\n  [PolicyKey.ValidEmailAddress]: (property: string) => `${property} has an invalid email address`,\n  [PolicyKey.ValidNameFormat]: (property: string) => `${property} has an invalid name format`,\n  [PolicyKey.ValidNumber]: (property: string) => `${property} has an invalid number`,\n  [PolicyKey.ValidPhoneFormat]: (property: string) => `${property} has an invalid phone number`,\n  [PolicyKey.ValidQueryFilter]: (property: string) =>\n    `${property} has failed the \"VALID_QUERY_FILTER\" policy`,\n  [PolicyKey.ValidType]: (property: string) => `${property} has failed the \"VALID_TYPE\" policy`,\n};\n\nexport default defaultMessageCreator;\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { CallbackType } from '../auth/enums';\nimport TextOutputCallback from '../fr-auth/callbacks/text-output-callback';\nimport FRStep from '../fr-auth/fr-step';\nimport { parseDisplayRecoveryCodesText } from './script-parser';\n\n/**\n * Utility for handling recovery code nodes.\n *\n * Example:\n *\n * ```js\n * // Determine if step is Display Recovery Codes step\n * const isDisplayRecoveryCodesStep = FRRecoveryCodes.isDisplayStep(step);\n * if (isDisplayRecoveryCodesStep) {\n *   const recoveryCodes = FRRecoveryCodes.getCodes(step);\n *   // Do the UI needful\n * }\n * ```\n */\nabstract class FRRecoveryCodes {\n  /**\n   * Retrieves the recovery codes by parsing the JavaScript message text in callback.\n   *\n   * @param step The step to evaluate\n   * @return Recovery Code values in array\n   */\n  public static getCodes(step: FRStep): string[] {\n    const text = this.getDisplayCallback(step)?.getOutputByName('message', '');\n    return parseDisplayRecoveryCodesText(text || '');\n  }\n\n  /**\n   * Determines if the given step is a Display Recovery Codes step.\n   *\n   * @param step The step to evaluate\n   * @return Is this step a Display Recovery Codes step\n   */\n  public static isDisplayStep(step: FRStep): boolean {\n    return !!this.getDisplayCallback(step);\n  }\n\n  /**\n   * Gets the recovery codes step.\n   *\n   * @param step The step to evaluate\n   * @return gets the Display Recovery Codes' callback\n   */\n  private static getDisplayCallback(step: FRStep): TextOutputCallback | undefined {\n    return step\n      .getCallbacksOfType<TextOutputCallback>(CallbackType.TextOutputCallback)\n      .find((x) => {\n        const cb = x.getOutputByName<string | undefined>('message', undefined);\n        return cb && (cb.includes('Recovery Codes') || cb.includes('recovery codes'));\n      });\n  }\n}\n\nexport default FRRecoveryCodes;\n","/*\n * @forgerock/javascript-sdk\n *\n * script-parser.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nfunction parseDisplayRecoveryCodesText(text: string): string[] {\n  /**\n   * e.g. ` ...\n   *    \"<div class=\\\"text-center\\\">\\n\" +\n   *    \"iZmEtxvQ00\\n\" +\n   *    \"</div>\\n\" +\n   * ... `\n   */\n  const recoveryCodesMatches = text.match(/\\s[\\w\\W]\"([\\w]*)\\\\/g);\n  const recoveryCodes =\n    Array.isArray(recoveryCodesMatches) &&\n    recoveryCodesMatches.map((substr: string) => {\n      // e.g. `\"iZmEtxvQ00\\`\n      const arr = substr.match(/\"([\\w]*)\\\\/);\n      return Array.isArray(arr) ? arr[1] : '';\n    });\n  return recoveryCodes || [];\n}\n\nexport { parseDisplayRecoveryCodesText };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { ConfigOptions } from '../config';\nimport FRStep, { FRStepHandler } from '../fr-auth/fr-step';\nimport FRUI from '../fr-ui';\nimport OAuth2Client from '../oauth2-client';\nimport SessionManager from '../session-manager';\nimport TokenManager from '../token-manager';\nimport UserManager from '../user-manager';\n\n/**\n * High-level API for logging a user in/out and getting profile information.\n */\nabstract class FRUser {\n  /**\n   * Logs the user in with the specified step handler, acquires OAuth tokens, and retrieves\n   * user profile.  **Currently not implemented.**\n   *\n   * @typeparam T The type of user object expected\n   * @param handler The function to invoke when handling authentication steps\n   * @param options Configuration overrides\n   */\n  public static async login<T>(\n    handler: FRStepHandler,\n    options?: ConfigOptions,\n  ): Promise<FRStep | T> {\n    console.info(handler, options); // Avoid lint errors\n    throw new Error('FRUser.login() not implemented');\n  }\n\n  /**\n   * Logs the user in with the specified UI, acquires OAuth tokens, and retrieves user profile.\n   *\n   * @typeparam T The type of user object expected\n   * @param ui The UI instance to use to acquire a session\n   * @param options Configuration overrides\n   */\n  public static async loginWithUI<T>(ui: FRUI, options?: ConfigOptions): Promise<T> {\n    try {\n      await ui.getSession(options);\n      await TokenManager.getTokens({ forceRenew: true });\n      const currentUser = await UserManager.getCurrentUser();\n      return currentUser as T;\n    } catch (error) {\n      throw new Error('Login failed');\n    }\n  }\n\n  /**\n   * Ends the user's session and revokes OAuth tokens.\n   *\n   * @param options Configuration overrides\n   */\n  public static async logout(options?: ConfigOptions): Promise<void> {\n    // Just log any exceptions that are thrown, but don't abandon the flow\n    try {\n      // Both invalidates the session on the server AND removes browser cookie\n      await SessionManager.logout();\n    } catch (error) {\n      console.warn('Session logout was not successful');\n    }\n    try {\n      // Invalidates session on the server tied to the ID Token\n      // Needed for Express environment as session logout is unavailable\n      await OAuth2Client.endSession(options);\n    } catch (error) {\n      console.warn('OAuth endSession was not successful');\n    }\n    try {\n      await OAuth2Client.revokeToken(options);\n    } catch (error) {\n      console.warn('OAuth revokeToken was not successful');\n    }\n    await TokenManager.deleteTokens();\n  }\n}\n\nexport default FRUser;\n","/*\n * @forgerock/javascript-sdk\n *\n * enums.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nenum WebAuthnOutcome {\n  Error = 'ERROR',\n  Unsupported = 'unsupported',\n}\n\nenum WebAuthnOutcomeType {\n  AbortError = 'AbortError',\n  DataError = 'DataError',\n  ConstraintError = 'ConstraintError',\n  EncodingError = 'EncodingError',\n  InvalidError = 'InvalidError',\n  NetworkError = 'NetworkError',\n  NotAllowedError = 'NotAllowedError',\n  NotSupportedError = 'NotSupportedError',\n  SecurityError = 'SecurityError',\n  TimeoutError = 'TimeoutError',\n  UnknownError = 'UnknownError',\n}\n\nenum WebAuthnStepType {\n  None = 0,\n  Authentication = 1,\n  Registration = 2,\n}\n\nexport { WebAuthnOutcome, WebAuthnOutcomeType, WebAuthnStepType };\n","/*\n * @forgerock/javascript-sdk\n *\n * helpers.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * @module\n * @ignore\n * These are private utility functions for HttpClient\n */\nimport { WebAuthnOutcomeType } from './enums';\nimport { ParsedCredential } from './interfaces';\n\nfunction ensureArray(arr: RegExpMatchArray | null): string[] {\n  return arr || [];\n}\n\nfunction arrayBufferToString(arrayBuffer: ArrayBuffer): string {\n  // https://goo.gl/yabPex - To future-proof, we'll pass along whatever the browser\n  // gives us and let AM disregard randomly-injected properties\n  const uint8Array = new Uint8Array(arrayBuffer);\n  const txtDecoder = new TextDecoder();\n\n  const json = txtDecoder.decode(uint8Array);\n  return json;\n}\n\nfunction getIndexOne(arr: RegExpMatchArray | null): string {\n  return arr ? arr[1] : '';\n}\n\n// TODO: Remove this once AM is providing fully-serialized JSON\nfunction parseCredentials(value: string): ParsedCredential[] {\n  try {\n    const creds = value\n      .split('}')\n      .filter((x) => !!x && x !== ']')\n      .map((x) => {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const idArray = parseNumberArray(x);\n        return {\n          id: new Int8Array(idArray).buffer,\n          type: 'public-key' as PublicKeyCredentialType,\n        };\n      });\n    return creds;\n  } catch (error) {\n    const e = new Error('Transforming credential object to string failed');\n    e.name = WebAuthnOutcomeType.EncodingError;\n    throw e;\n  }\n}\n\nfunction parseNumberArray(value: string): number[] {\n  const matches = /new Int8Array\\((.+)\\)/.exec(value);\n  if (matches === null || matches.length < 2) {\n    return [];\n  }\n  return JSON.parse(matches[1]);\n}\n\nfunction parsePubKeyArray(value: string | unknown[]): PublicKeyCredentialParameters[] | undefined {\n  if (Array.isArray(value)) {\n    return value as PublicKeyCredentialParameters[];\n  }\n  if (typeof value !== 'string') {\n    return undefined;\n  }\n  if (value && value[0] === '[') {\n    return JSON.parse(value);\n  }\n  value = value.replace(/(\\w+):/g, '\"$1\":');\n  return JSON.parse(`[${value}]`);\n}\n\nfunction parseAllowCredentialsArray(\n  value: string | unknown[],\n): PublicKeyCredentialDescriptor[] | undefined {\n  if (!value) {\n    return undefined;\n  }\n  if (Array.isArray(value)) {\n    return value as PublicKeyCredentialDescriptor[];\n  }\n  if (typeof value !== 'string') {\n    return undefined;\n  }\n  if (value && value[0] === '[') {\n    return JSON.parse(value);\n  }\n  value = value.replace(/(\\w+):/g, '\"$1\":');\n  return JSON.parse(`[${value}]`);\n}\n\n/**\n * AM is currently serializing RP as one of the following formats, depending on\n * whether RP ID has been configured:\n *   \"relyingPartyId\":\"\"\n *   \"relyingPartyId\":\"rpId: \\\"foo\\\",\"\n * This regex handles both formats, but should be removed once AM is fixed.\n */\nfunction parseRelyingPartyId(relyingPartyId: string): string {\n  if (relyingPartyId.includes('rpId')) {\n    return relyingPartyId.replace(/rpId: \"(.+)\",/, '$1');\n  } else {\n    return relyingPartyId.replace(/id: \"(.+)\",/, '$1');\n  }\n}\n\nexport {\n  ensureArray,\n  arrayBufferToString,\n  getIndexOne,\n  parseCredentials,\n  parseNumberArray,\n  parseAllowCredentialsArray,\n  parsePubKeyArray,\n  parseRelyingPartyId,\n};\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { CallbackType } from '../auth/enums';\nimport HiddenValueCallback from '../fr-auth/callbacks/hidden-value-callback';\nimport MetadataCallback from '../fr-auth/callbacks/metadata-callback';\nimport FRStep from '../fr-auth/fr-step';\nimport { WebAuthnOutcome, WebAuthnOutcomeType, WebAuthnStepType } from './enums';\nimport {\n  arrayBufferToString,\n  parseCredentials,\n  parsePubKeyArray,\n  parseRelyingPartyId,\n} from './helpers';\nimport {\n  RelyingParty,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnRegistrationMetadata,\n  WebAuthnTextOutputRegistration,\n} from './interfaces';\nimport TextOutputCallback from '../fr-auth/callbacks/text-output-callback';\nimport { parseWebAuthnAuthenticateText, parseWebAuthnRegisterText } from './script-parser';\n\n// JSON-based WebAuthn\ntype WebAuthnMetadata = WebAuthnAuthenticationMetadata | WebAuthnRegistrationMetadata;\n// Script-based WebAuthn\ntype WebAuthnTextOutput = WebAuthnTextOutputRegistration;\n/**\n * Utility for integrating a web browser's WebAuthn API.\n *\n * Example:\n *\n * ```js\n * // Determine if a step is a WebAuthn step\n * const stepType = FRWebAuthn.getWebAuthnStepType(step);\n * if (stepType === WebAuthnStepType.Registration) {\n *   // Register a new device\n *   await FRWebAuthn.register(step);\n * } else if (stepType === WebAuthnStepType.Authentication) {\n *   // Authenticate with a registered device\n *   await FRWebAuthn.authenticate(step);\n * }\n * ```\n */\nabstract class FRWebAuthn {\n  /**\n   * Determines if the given step is a WebAuthn step.\n   *\n   * @param step The step to evaluate\n   * @return A WebAuthnStepType value\n   */\n  public static getWebAuthnStepType(step: FRStep): WebAuthnStepType {\n    const outcomeCallback = this.getOutcomeCallback(step);\n    const metadataCallback = this.getMetadataCallback(step);\n    const textOutputCallback = this.getTextOutputCallback(step);\n\n    if (outcomeCallback && metadataCallback) {\n      const metadata = metadataCallback.getOutputValue('data') as { pubKeyCredParams?: [] };\n      if (metadata?.pubKeyCredParams) {\n        return WebAuthnStepType.Registration;\n      }\n\n      return WebAuthnStepType.Authentication;\n    } else if (outcomeCallback && textOutputCallback) {\n      const message = textOutputCallback.getMessage();\n      if (message.includes('pubKeyCredParams')) {\n        return WebAuthnStepType.Registration;\n      }\n\n      return WebAuthnStepType.Authentication;\n    } else {\n      return WebAuthnStepType.None;\n    }\n  }\n\n  /**\n   * Populates the step with the necessary authentication outcome.\n   *\n   * @param step The step that contains WebAuthn authentication data\n   * @return The populated step\n   */\n  public static async authenticate(step: FRStep): Promise<FRStep> {\n    const { hiddenCallback, metadataCallback, textOutputCallback } = this.getCallbacks(step);\n    if (hiddenCallback && (metadataCallback || textOutputCallback)) {\n      let outcome: string;\n\n      try {\n        let publicKey: PublicKeyCredentialRequestOptions;\n        if (metadataCallback) {\n          const meta = metadataCallback.getOutputValue('data') as WebAuthnAuthenticationMetadata;\n          publicKey = this.createAuthenticationPublicKey(meta);\n        } else if (textOutputCallback) {\n          publicKey = parseWebAuthnAuthenticateText(textOutputCallback.getMessage());\n        }\n        // TypeScript doesn't like `publicKey` being assigned in conditionals above\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const credential = await this.getAuthenticationCredential(publicKey);\n        outcome = this.getAuthenticationOutcome(credential);\n      } catch (error) {\n        // NotSupportedError is a special case\n        if (error.name === WebAuthnOutcomeType.NotSupportedError) {\n          hiddenCallback.setInputValue(WebAuthnOutcome.Unsupported);\n          throw error;\n        }\n        hiddenCallback.setInputValue(`${WebAuthnOutcome.Error}::${error.name}:${error.message}`);\n        throw error;\n      }\n\n      hiddenCallback.setInputValue(outcome);\n      return step;\n    } else {\n      const e = new Error('Incorrect callbacks for WebAuthn authentication');\n      e.name = WebAuthnOutcomeType.DataError;\n      hiddenCallback?.setInputValue(`${WebAuthnOutcome.Error}::${e.name}:${e.message}`);\n      throw e;\n    }\n  }\n\n  /**\n   * Populates the step with the necessary registration outcome.\n   *\n   * @param step The step that contains WebAuthn registration data\n   * @return The populated step\n   */\n  public static async register(step: FRStep): Promise<FRStep> {\n    const { hiddenCallback, metadataCallback, textOutputCallback } = this.getCallbacks(step);\n    if (hiddenCallback && (metadataCallback || textOutputCallback)) {\n      let outcome: string;\n\n      try {\n        let publicKey: PublicKeyCredentialRequestOptions;\n        if (metadataCallback) {\n          const meta = metadataCallback.getOutputValue('data') as WebAuthnRegistrationMetadata;\n          publicKey = this.createRegistrationPublicKey(meta);\n        } else if (textOutputCallback) {\n          publicKey = parseWebAuthnRegisterText(textOutputCallback.getMessage());\n        }\n        // TypeScript doesn't like `publicKey` being assigned in conditionals above\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const credential = await this.getRegistrationCredential(publicKey);\n        outcome = this.getRegistrationOutcome(credential);\n      } catch (error) {\n        // NotSupportedError is a special case\n        if (error.name === WebAuthnOutcomeType.NotSupportedError) {\n          hiddenCallback.setInputValue(WebAuthnOutcome.Unsupported);\n          throw error;\n        }\n        hiddenCallback.setInputValue(`${WebAuthnOutcome.Error}::${error.name}:${error.message}`);\n        throw error;\n      }\n\n      hiddenCallback.setInputValue(outcome);\n      return step;\n    } else {\n      const e = new Error('Incorrect callbacks for WebAuthn registration');\n      e.name = WebAuthnOutcomeType.DataError;\n      hiddenCallback?.setInputValue(`${WebAuthnOutcome.Error}::${e.name}:${e.message}`);\n      throw e;\n    }\n  }\n\n  /**\n   * Returns an object containing the two WebAuthn callbacks.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The WebAuthn callbacks\n   */\n  public static getCallbacks(step: FRStep): WebAuthnCallbacks {\n    const hiddenCallback = this.getOutcomeCallback(step);\n    const metadataCallback = this.getMetadataCallback(step);\n    const textOutputCallback = this.getTextOutputCallback(step);\n\n    const returnObj: WebAuthnCallbacks = {\n      hiddenCallback,\n    };\n    if (metadataCallback) {\n      returnObj.metadataCallback = metadataCallback;\n    } else if (textOutputCallback) {\n      returnObj.textOutputCallback = textOutputCallback;\n    }\n    return returnObj;\n  }\n\n  /**\n   * Returns the WebAuthn metadata callback containing data to pass to the browser\n   * Web Authentication API.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The metadata callback\n   */\n  public static getMetadataCallback(step: FRStep): MetadataCallback | undefined {\n    return step.getCallbacksOfType<MetadataCallback>(CallbackType.MetadataCallback).find((x) => {\n      const cb = x.getOutputByName<WebAuthnMetadata | undefined>('data', undefined);\n      return cb && cb.hasOwnProperty('relyingPartyId');\n    });\n  }\n\n  /**\n   * Returns the WebAuthn hidden value callback where the outcome should be populated.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The hidden value callback\n   */\n  public static getOutcomeCallback(step: FRStep): HiddenValueCallback | undefined {\n    return step\n      .getCallbacksOfType<HiddenValueCallback>(CallbackType.HiddenValueCallback)\n      .find((x) => x.getOutputByName<string>('id', '') === 'webAuthnOutcome');\n  }\n\n  /**\n   * Returns the WebAuthn metadata callback containing data to pass to the browser\n   * Web Authentication API.\n   *\n   * @param step The step that contains WebAuthn callbacks\n   * @return The metadata callback\n   */\n  public static getTextOutputCallback(step: FRStep): TextOutputCallback | undefined {\n    return step\n      .getCallbacksOfType<TextOutputCallback>(CallbackType.TextOutputCallback)\n      .find((x) => {\n        const cb = x.getOutputByName<WebAuthnTextOutput | undefined>('message', undefined);\n        return cb && cb.includes('webAuthnOutcome');\n      });\n  }\n\n  /**\n   * Retrieves the credential from the browser Web Authentication API.\n   *\n   * @param options The public key options associated with the request\n   * @return The credential\n   */\n  public static async getAuthenticationCredential(\n    options: PublicKeyCredentialRequestOptions,\n  ): Promise<PublicKeyCredential | null> {\n    // Feature check before we attempt registering a device\n    if (!window.PublicKeyCredential) {\n      const e = new Error('PublicKeyCredential not supported by this browser');\n      e.name = WebAuthnOutcomeType.NotSupportedError;\n      throw e;\n    }\n    const credential = await navigator.credentials.get({ publicKey: options });\n    return credential as PublicKeyCredential;\n  }\n\n  /**\n   * Converts an authentication credential into the outcome expected by OpenAM.\n   *\n   * @param credential The credential to convert\n   * @return The outcome string\n   */\n  public static getAuthenticationOutcome(credential: PublicKeyCredential | null): string {\n    if (credential === null) {\n      const e = new Error('No credential generated from authentication');\n      e.name = WebAuthnOutcomeType.UnknownError;\n      throw e;\n    }\n\n    try {\n      const clientDataJSON = arrayBufferToString(credential.response.clientDataJSON);\n      const assertionResponse = credential.response as AuthenticatorAssertionResponse;\n      const authenticatorData = new Int8Array(assertionResponse.authenticatorData).toString();\n      const signature = new Int8Array(assertionResponse.signature).toString();\n\n      // Current native typing for PublicKeyCredential does not include `userHandle`\n      // eslint-disable-next-line\n      // @ts-ignore\n      const userHandle = arrayBufferToString(credential.response.userHandle);\n\n      let stringOutput = `${clientDataJSON}::${authenticatorData}::${signature}::${credential.id}`;\n      // Check if Username is stored on device\n      if (userHandle) {\n        stringOutput = `${stringOutput}::${userHandle}`;\n      }\n      return stringOutput;\n    } catch (error) {\n      const e = new Error('Transforming credential object to string failed');\n      e.name = WebAuthnOutcomeType.EncodingError;\n      throw e;\n    }\n  }\n\n  /**\n   * Retrieves the credential from the browser Web Authentication API.\n   *\n   * @param options The public key options associated with the request\n   * @return The credential\n   */\n  public static async getRegistrationCredential(\n    options: PublicKeyCredentialCreationOptions,\n  ): Promise<PublicKeyCredential | null> {\n    // Feature check before we attempt registering a device\n    if (!window.PublicKeyCredential) {\n      const e = new Error('PublicKeyCredential not supported by this browser');\n      e.name = WebAuthnOutcomeType.NotSupportedError;\n      throw e;\n    }\n    const credential = await navigator.credentials.create({ publicKey: options });\n    return credential as PublicKeyCredential;\n  }\n\n  /**\n   * Converts a registration credential into the outcome expected by OpenAM.\n   *\n   * @param credential The credential to convert\n   * @return The outcome string\n   */\n  public static getRegistrationOutcome(credential: PublicKeyCredential | null): string {\n    if (credential === null) {\n      const e = new Error('No credential generated from registration');\n      e.name = WebAuthnOutcomeType.UnknownError;\n      throw e;\n    }\n\n    try {\n      const clientDataJSON = arrayBufferToString(credential.response.clientDataJSON);\n      const attestationResponse = credential.response as AuthenticatorAttestationResponse;\n      const attestationObject = new Int8Array(attestationResponse.attestationObject).toString();\n      return `${clientDataJSON}::${attestationObject}::${credential.id}`;\n    } catch (error) {\n      const e = new Error('Transforming credential object to string failed');\n      e.name = WebAuthnOutcomeType.EncodingError;\n      throw e;\n    }\n  }\n\n  /**\n   * Converts authentication tree metadata into options required by the browser\n   * Web Authentication API.\n   *\n   * @param metadata The metadata provided in the authentication tree MetadataCallback\n   * @return The Web Authentication API request options\n   */\n  public static createAuthenticationPublicKey(\n    metadata: WebAuthnAuthenticationMetadata,\n  ): PublicKeyCredentialRequestOptions {\n    const {\n      acceptableCredentials,\n      allowCredentials,\n      challenge,\n      relyingPartyId,\n      timeout,\n      userVerification,\n    } = metadata;\n    const rpId = parseRelyingPartyId(relyingPartyId);\n    const allowCredentialsValue = parseCredentials(allowCredentials || acceptableCredentials || '');\n\n    return {\n      challenge: Uint8Array.from(atob(challenge), (c) => c.charCodeAt(0)).buffer,\n      timeout,\n      // only add key-value pair if proper value is provided\n      ...(allowCredentialsValue && { allowCredentials: allowCredentialsValue }),\n      ...(userVerification && { userVerification }),\n      ...(rpId && { rpId }),\n    };\n  }\n\n  /**\n   * Converts authentication tree metadata into options required by the browser\n   * Web Authentication API.\n   *\n   * @param metadata The metadata provided in the authentication tree MetadataCallback\n   * @return The Web Authentication API request options\n   */\n  public static createRegistrationPublicKey(\n    metadata: WebAuthnRegistrationMetadata,\n  ): PublicKeyCredentialCreationOptions {\n    const { pubKeyCredParams: pubKeyCredParamsString } = metadata;\n    const pubKeyCredParams = parsePubKeyArray(pubKeyCredParamsString);\n    if (!pubKeyCredParams) {\n      const e = new Error('Missing pubKeyCredParams property from registration options');\n      e.name = WebAuthnOutcomeType.DataError;\n      throw e;\n    }\n    const excludeCredentials = parseCredentials(metadata.excludeCredentials);\n\n    const {\n      attestationPreference,\n      authenticatorSelection,\n      challenge,\n      relyingPartyId,\n      relyingPartyName,\n      timeout,\n      userId,\n      userName,\n      displayName,\n    } = metadata;\n    const rpId = parseRelyingPartyId(relyingPartyId);\n    const rp: RelyingParty = {\n      name: relyingPartyName,\n      ...(rpId && { id: rpId }),\n    };\n\n    return {\n      attestation: attestationPreference,\n      authenticatorSelection: JSON.parse(authenticatorSelection),\n      challenge: Uint8Array.from(atob(challenge), (c) => c.charCodeAt(0)).buffer,\n      ...(excludeCredentials.length && { excludeCredentials }),\n      pubKeyCredParams,\n      rp,\n      timeout,\n      user: {\n        displayName: displayName || userName,\n        id: Int8Array.from(userId.split('').map((c: string) => c.charCodeAt(0))),\n        name: userName,\n      },\n    };\n  }\n}\n\nexport default FRWebAuthn;\nexport {\n  RelyingParty,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnOutcome,\n  WebAuthnRegistrationMetadata,\n  WebAuthnStepType,\n};\n","/*\n * @forgerock/javascript-sdk\n *\n * script-parser.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { WebAuthnOutcomeType } from './enums';\nimport { ensureArray, getIndexOne, parsePubKeyArray, parseCredentials } from './helpers';\nimport { AttestationType, UserVerificationType } from './interfaces';\n\nfunction parseWebAuthnRegisterText(text: string): PublicKeyCredentialCreationOptions {\n  const txtEncoder = new TextEncoder();\n\n  // TODO: Incrementally move to `*` instead of `{0,}`\n  // e.g. `attestation: \"none\"`\n  const attestation = getIndexOne(text.match(/attestation\"{0,}:\\s{0,}\"(\\w+)\"/)) as AttestationType;\n  // e.g. `timeout: 60000`\n  const timeout = Number(getIndexOne(text.match(/timeout\"{0,}:\\s{0,}(\\d+)/)));\n  // e.g. from 7.0: `\"userVerification\":\"preferred\"`\n  // e.g. from 6.5: `userVerification: \"preferred\"`\n  const userVerification = getIndexOne(\n    text.match(/userVerification\"{0,}:\\s{0,}\"(\\w+)\"/),\n  ) as UserVerificationType;\n  // e.g. `\"requireResidentKey\":true`\n  const requireResidentKey = getIndexOne(\n    text.match(/requireResidentKey\"{0,}:\\s{0,}(\\w+)/),\n  ) as string;\n  // e.g. `\"authenticatorAttachment\":\"cross-platform\"`\n  const authenticatorAttachment = getIndexOne(\n    text.match(/authenticatorAttachment\"{0,}:\\s{0,}\"([\\w-]+)/),\n  ) as AuthenticatorAttachment;\n\n  // e.g. `rp: {\\n id: \\\"https://user.example.com:3002\\\",\\n name: \\\"ForgeRock\\\"\\n }`\n  const rp = getIndexOne(text.match(/rp\"{0,}:\\s{0,}{([^}]+)}/)).trim();\n  // e.g. `id: \\\"example.com\\\"\n  const rpId = getIndexOne(rp.match(/id\"{0,}:\\s{0,}\"([^\"]*)\"/));\n  // e.g. `name: \\\"ForgeRock\\\"`\n  const rpName = getIndexOne(rp.match(/name\"{0,}:\\s{0,}\"([^\"]*)\"/));\n\n  // e.g. `user: {\\n id: Uint8Array.from(\\\"NTdhN...RiNjI5\\\",\n  // function (c) { return c.charCodeAt(0) }),\\n\n  // name: \\\"57a5b4e4-...-a4f2e5d4b629\\\",\\n\n  // displayName: \\\"57a5b4e4-...-a4f2e5d4b629\\\"\\n }`\n  const user = getIndexOne(text.match(/user\"{0,}:\\s{0,}{([^]{0,})},/)).trim();\n  // e.g `id: Uint8Array.from(\\\"NTdhN...RiNjI5\\\",`\n  const userId = getIndexOne(user.match(/id\"{0,}:\\s{0,}Uint8Array.from\\(\"([^\"]+)\"/));\n  // e.g. `name: \\\"57a5b4e4-...-a4f2e5d4b629\\\",`\n  const userName = getIndexOne(user.match(/name\"{0,}:\\s{0,}\"([\\d\\w._-]+)\"/));\n  // e.g. `displayName: \\\"57a5b4e4-...-a4f2e5d4b629\\\"`\n  const userDisplayName = getIndexOne(user.match(/displayName\"{0,}:\\s{0,}\"([\\d\\w\\s.@_-]+)\"/));\n\n  // e.g. `pubKeyCredParams: [\n  // { \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -257 }, { \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -7 }\n  // ]`\n  const pubKeyCredParamsString = getIndexOne(\n    // Capture the `pubKeyCredParams` without also matching `excludeCredentials` as well.\n    // `excludeCredentials` values are very similar to this property, so we need to make sure\n    // our last value doesn't end with \"buffer\", so we are only capturing objects that\n    // end in a digit and possibly a space.\n    text.match(/pubKeyCredParams\"*:\\s*\\[([^]+\\d\\s*})\\s*]/),\n  ).trim();\n  // e.g. `{ \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -257 }, { \\\"type\\\": \\\"public-key\\\", \\\"alg\\\": -7 }`\n  const pubKeyCredParams = parsePubKeyArray(pubKeyCredParamsString);\n  if (!pubKeyCredParams) {\n    const e = new Error('Missing pubKeyCredParams property from registration options');\n    e.name = WebAuthnOutcomeType.DataError;\n    throw e;\n  }\n\n  // e.g. `excludeCredentials: [{\n  // \\\"type\\\": \\\"public-key\\\", \\\"id\\\": new Int8Array([-18, 69, -99, 82, 38, -66]).buffer },\n  // { \\\"type\\\": \\\"public-key\\\", \\\"id\\\": new Int8Array([64, 17, -15, 56, -32, 91]).buffer }],\\n`\n  const excludeCredentialsString = getIndexOne(\n    text.match(/excludeCredentials\"{0,}:\\s{0,}\\[([^]+)\\s{0,}]/),\n  ).trim();\n  // e.g. `{ \\\"type\\\": \\\"public-key\\\", \\\"id\\\": new Int8Array([-18, 69, -99, 82, 38, -66]).buffer },\n  // { \\\"type\\\": \\\"public-key\\\", \\\"id\\\": new Int8Array([64, 17, -15, 56, -32, 91]).buffer }`\n  const excludeCredentials = parseCredentials(excludeCredentialsString);\n\n  // e.g. `challenge: new Int8Array([87, -95, 18, ... -3,  49, 12, 81]).buffer,`\n  const challengeArr: string[] = ensureArray(\n    text.match(/challenge\"{0,}:\\s{0,}new\\s{0,}(Uint|Int)8Array\\(([^\\)]+)/),\n  );\n  // e.g. `[87, -95, 18, ... -3,  49, 12, 81]`\n  const challengeJSON = JSON.parse(challengeArr[2]);\n  // e.g. [87, -95, 18, ... -3,  49, 12, 81]\n  const challenge = new Int8Array(challengeJSON).buffer;\n\n  return {\n    attestation,\n    authenticatorSelection: {\n      userVerification,\n      // Only include authenticatorAttachment prop if the value is truthy\n      ...(authenticatorAttachment && { authenticatorAttachment }),\n      // Only include requireResidentKey prop if the value is of string \"true\"\n      ...(requireResidentKey === 'true' && { requireResidentKey: !!requireResidentKey }),\n    },\n    challenge,\n    ...(excludeCredentials.length && { excludeCredentials }),\n    pubKeyCredParams,\n    rp: {\n      name: rpName,\n      // only add key-value pair if truthy value is provided\n      ...(rpId && { id: rpId }),\n    },\n    timeout,\n    user: {\n      displayName: userDisplayName,\n      id: txtEncoder.encode(userId),\n      name: userName,\n    },\n  };\n}\n\nfunction parseWebAuthnAuthenticateText(text: string): PublicKeyCredentialRequestOptions {\n  let allowCredentials;\n  let allowCredentialsText;\n\n  if (text.includes('acceptableCredentials')) {\n    // e.g. `var acceptableCredentials = [\n    //  { \"type\": \"public-key\", \"id\": new Int8Array([1, 97, 2, 123, ... -17]).buffer }\n    // ];`\n    allowCredentialsText = getIndexOne(\n      text.match(/acceptableCredentials\"*\\s*=\\s*\\[([^]+)\\s*]/),\n    ).trim();\n  } else {\n    // e.g. `allowCredentials: [\n    // { \\\"type\\\": \\\"public-key\\\",\n    // \\\"id\\\": new Int8Array([-107, 93, 68, -67, ... -19, 7, 4]).buffer }\n    // ]`\n    allowCredentialsText = getIndexOne(\n      text.match(/allowCredentials\"{0,}:\\s{0,}\\[([^]+)\\s{0,}]/),\n    ).trim();\n  }\n  // e.g. `\"userVerification\":\"preferred\"`\n  const userVerification = getIndexOne(\n    text.match(/userVerification\"{0,}:\\s{0,}\"(\\w+)\"/),\n  ) as UserVerificationType;\n\n  if (allowCredentialsText) {\n    // Splitting objects in array in case the user has multiple keys\n    const allowCredentialArr = allowCredentialsText.split('},') || [allowCredentialsText];\n    // Iterating over array of substrings\n    allowCredentials = allowCredentialArr.map((str) => {\n      // e.g. `{ \\\"type\\\": \\\"public-key\\\",\n      const type = getIndexOne(str.match(/type\"{0,}:\\s{0,}\"([\\w-]+)\"/)) as 'public-key';\n      // e.g. \\\"id\\\": new Int8Array([-107, 93, 68, -67, ... -19, 7, 4]).buffer\n      const idArr = ensureArray(str.match(/id\"{0,}:\\s{0,}new\\s{0,}(Uint|Int)8Array\\(([^\\)]+)/));\n      // e.g. `[-107, 93, 68, -67, ... -19, 7, 4]`\n      const idJSON = JSON.parse(idArr[2]);\n      // e.g. [-107, 93, 68, -67, ... -19, 7, 4]\n      const id = new Int8Array(idJSON).buffer;\n\n      return {\n        type,\n        id,\n      };\n    });\n  }\n\n  // e.g. `timeout: 60000`\n  const timeout = Number(getIndexOne(text.match(/timeout\"{0,}:\\s{0,}(\\d+)/)));\n\n  // e.g. `challenge: new Int8Array([87, -95, 18, ... -3,  49, 12, 81]).buffer,`\n  const challengeArr: string[] = ensureArray(\n    text.match(/challenge\"{0,}:\\s{0,}new\\s{0,}(Uint|Int)8Array\\(([^\\)]+)/),\n  );\n  // e.g. `[87, -95, 18, ... -3,  49, 12, 81]`\n  const challengeJSON = JSON.parse(challengeArr[2]);\n  // e.g. [87, -95, 18, ... -3,  49, 12, 81]\n  const challenge = new Int8Array(challengeJSON).buffer;\n  // e.g. `rpId: \\\"example.com\\\"`\n  const rpId = getIndexOne(text.match(/rpId\"{0,}:\\s{0,}\\\\{0,}\"([^\"\\\\]*)/));\n\n  return {\n    challenge,\n    timeout,\n    // only add key-value pairs if the truthy values are provided\n    ...(allowCredentials && { allowCredentials }),\n    ...(userVerification && { userVerification }),\n    ...(rpId && { rpId }),\n  };\n}\n\nexport { parseWebAuthnAuthenticateText, parseWebAuthnRegisterText };\n","/*\n * @forgerock/javascript-sdk\n *\n * helpers.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * @module\n * @ignore\n * These are private utility functions for HttpClient\n */\nimport { CustomPathConfig } from '../config/interfaces';\nimport {\n  Advices,\n  HttpClientRequestOptions,\n  RequiresNewTokenFn,\n  AuthorizationJSON,\n} from './interfaces';\nimport { Tokens } from '../shared/interfaces';\nimport { getEndpointPath, resolve, stringify } from '../util/url';\n\nexport function addAuthzInfoToHeaders(\n  init: RequestInit,\n  advices: Advices,\n  tokens?: Tokens,\n): Headers {\n  const headers = new Headers(init.headers);\n\n  if (advices.AuthenticateToServiceConditionAdvice) {\n    headers.set('x-tree', advices.AuthenticateToServiceConditionAdvice[0]);\n  } else if (advices.TransactionConditionAdvice) {\n    headers.set('x-txid', advices.TransactionConditionAdvice[0]);\n  }\n\n  if (tokens && tokens.idToken) {\n    headers.set('x-idtoken', tokens.idToken);\n  }\n  return headers;\n}\n\nexport function addAuthzInfoToURL(url: string, advices: Advices, tokens?: Tokens): string {\n  const updatedURL = new URL(url);\n\n  // Only modify URL for Transactional Authorization\n  if (advices.TransactionConditionAdvice) {\n    const txId = advices.TransactionConditionAdvice[0];\n    // Add Txn ID to *original* request options as URL param\n    updatedURL.searchParams.append('_txid', txId);\n  }\n\n  // If tokens are used, send idToken (OIDC)\n  if (tokens && tokens.idToken) {\n    updatedURL.searchParams.append('_idtoken', tokens.idToken);\n  }\n\n  // FYI: in certain circumstances, the URL may be returned unchanged\n  return updatedURL.toString();\n}\n\nexport function buildAuthzOptions(\n  authzObj: AuthorizationJSON,\n  baseURL: string,\n  timeout: number,\n  realmPath?: string,\n  customPaths?: CustomPathConfig,\n): HttpClientRequestOptions {\n  const treeAuthAdvices = authzObj.advices && authzObj.advices.AuthenticateToServiceConditionAdvice;\n  const txnAuthAdvices = authzObj.advices && authzObj.advices.TransactionConditionAdvice;\n  let attributeValue = '';\n  let attributeName = '';\n\n  if (treeAuthAdvices) {\n    attributeValue = treeAuthAdvices.reduce((prev: string, curr: string) => {\n      const prevWithSpace = prev ? ` ${prev}` : prev;\n      prev = `${curr}${prevWithSpace}`;\n      return prev;\n    }, '');\n    attributeName = 'AuthenticateToServiceConditionAdvice';\n  } else if (txnAuthAdvices) {\n    attributeValue = txnAuthAdvices.reduce((prev: string, curr: string) => {\n      const prevWithSpace = prev ? ` ${prev}` : prev;\n      prev = `${curr}${prevWithSpace}`;\n      return prev;\n    }, '');\n    attributeName = 'TransactionConditionAdvice';\n  }\n\n  const openTags = `<Advices><AttributeValuePair>`;\n  const nameTag = `<Attribute name=\"${attributeName}\"/>`;\n  const valueTag = `<Value>${attributeValue}</Value>`;\n  const endTags = `</AttributeValuePair></Advices>`;\n  const fullXML = `${openTags}${nameTag}${valueTag}${endTags}`;\n\n  const path = getEndpointPath('authenticate', realmPath, customPaths);\n  const queryParams = {\n    authIndexType: 'composite_advice',\n    authIndexValue: fullXML,\n  };\n\n  const options = {\n    init: {\n      method: 'POST',\n      credentials: 'include' as const,\n      headers: {\n        'Accept-API-Version': 'resource=2.0, protocol=1.0',\n      },\n    },\n    timeout,\n    url: resolve(baseURL, `${path}?${stringify(queryParams)}`),\n  };\n  return options;\n}\n\nexport function examineForIGAuthz(res: Response): boolean {\n  const type = res.headers.get('Content-Type') || '';\n  return type.includes('html') && res.url.includes('composite_advice');\n}\n\nexport async function examineForRESTAuthz(res: Response): Promise<boolean> {\n  const clone = res.clone();\n  const json = await clone.json();\n  return !!json.advices;\n}\n\nfunction getXMLValueFromURL(urlString: string): string {\n  const url = new URL(urlString);\n  const value = url.searchParams.get('authIndexValue') || '';\n  const parser = new DOMParser();\n  const decodedValue = decodeURIComponent(value);\n  const doc = parser.parseFromString(decodedValue, 'application/xml');\n  const el = doc.querySelector('Value');\n  return el ? el.innerHTML : '';\n}\n\nexport function hasAuthzAdvice(json: AuthorizationJSON): boolean {\n  if (json.advices && json.advices.AuthenticateToServiceConditionAdvice) {\n    return (\n      Array.isArray(json.advices.AuthenticateToServiceConditionAdvice) &&\n      json.advices.AuthenticateToServiceConditionAdvice.length > 0\n    );\n  } else if (json.advices && json.advices.TransactionConditionAdvice) {\n    return (\n      Array.isArray(json.advices.TransactionConditionAdvice) &&\n      json.advices.TransactionConditionAdvice.length > 0\n    );\n  } else {\n    return false;\n  }\n}\n\nexport async function isAuthzStep(res: Response): Promise<boolean> {\n  // TODO: add comment\n  const clone = res.clone();\n  const json = await clone.json();\n  return !!json.callbacks;\n}\n\nexport function newTokenRequired(res: Response, requiresNewToken?: RequiresNewTokenFn): boolean {\n  if (typeof requiresNewToken === 'function') {\n    return requiresNewToken(res);\n  }\n  return res.status === 401;\n}\n\nexport function normalizeIGJSON(res: Response): AuthorizationJSON {\n  const advices: Advices = {};\n  if (res.url.includes('AuthenticateToServiceConditionAdvice')) {\n    advices.AuthenticateToServiceConditionAdvice = [getXMLValueFromURL(res.url)];\n  } else {\n    advices.TransactionConditionAdvice = [getXMLValueFromURL(res.url)];\n  }\n  return {\n    resource: '',\n    actions: {},\n    attributes: {},\n    advices,\n    ttl: 0,\n  };\n}\n\nexport async function normalizeRESTJSON(res: Response): Promise<AuthorizationJSON> {\n  return await res.json();\n}\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Config from '../config';\nimport { ActionTypes } from '../config/enums';\nimport Dispatcher from '../event';\nimport FRAuth from '../fr-auth';\nimport { StepType } from '../fr-auth/enums';\nimport FRStep from '../fr-auth/fr-step';\nimport {\n  HandleStep,\n  HttpClientRequestOptions,\n  RequiresNewTokenFn,\n  AuthorizationJSON,\n} from './interfaces';\nimport TokenManager from '../token-manager';\nimport TokenStorage from '../token-storage';\nimport { withTimeout } from '../util/timeout';\nimport {\n  addAuthzInfoToHeaders,\n  addAuthzInfoToURL,\n  buildAuthzOptions,\n  examineForIGAuthz,\n  examineForRESTAuthz,\n  hasAuthzAdvice,\n  isAuthzStep,\n  newTokenRequired,\n  normalizeIGJSON,\n  normalizeRESTJSON,\n} from './helpers';\nimport middlewareWrapper from '../util/middleware';\n\n/**\n * HTTP client that includes bearer token injection and refresh.\n * This module also supports authorization for policy protected endpoints.\n *\n * Example:\n *\n * ```js\n * return forgerock.HttpClient.request({\n *   url: `https://example.com/protected/resource`,\n *   init: {\n *     method: 'GET',\n *     credentials: 'include',\n *   },\n *   authorization: {\n *     handleStep: async (step) => {\n *       step.getCallbackOfType('PasswordCallback').setPassword(pw);\n *       return Promise.resolve(step);\n *     },\n *   },\n * });\n * ```\n */\nabstract class HttpClient extends Dispatcher {\n  /**\n   * Makes a request using the specified options.\n   *\n   * @param options The options to use when making the request\n   */\n  public static async request(options: HttpClientRequestOptions): Promise<Response> {\n    let res = await this._request(options, false);\n    let authorizationJSON: AuthorizationJSON | undefined;\n    let hasIG = false;\n\n    if (newTokenRequired(res, options.requiresNewToken)) {\n      res = await this._request(options, true);\n    }\n\n    if (options.authorization && options.authorization.handleStep) {\n      if (res.redirected && examineForIGAuthz(res)) {\n        hasIG = true;\n        authorizationJSON = normalizeIGJSON(res);\n      } else if (await examineForRESTAuthz(res)) {\n        authorizationJSON = await normalizeRESTJSON(res);\n      }\n\n      if (authorizationJSON && authorizationJSON.advices) {\n        const { realmPath, serverConfig } = Config.get(options.authorization.config);\n        const authzOptions = buildAuthzOptions(\n          authorizationJSON,\n          serverConfig.baseUrl,\n          options.timeout,\n          realmPath,\n          serverConfig.paths,\n        );\n\n        const url = new URL(authzOptions.url);\n        const type = url.searchParams.get('authIndexType') as string;\n        const tree = url.searchParams.get('authIndexValue') as string;\n        const { url: authUrl, init: authInit } = middlewareWrapper(\n          {\n            url: new URL(authzOptions.url),\n            init: authzOptions.init,\n          },\n          ActionTypes.StartAuthenticate,\n          { type, tree },\n        );\n        authzOptions.url = authUrl.toString();\n        authzOptions.init = authInit;\n        const initialStep = await this._request(authzOptions, false);\n\n        if (!(await isAuthzStep(initialStep))) {\n          throw new Error('Error: Initial response from auth server not a \"step\".');\n        }\n        if (!hasAuthzAdvice(authorizationJSON)) {\n          throw new Error(`Error: Transactional or Service Advice is empty.`);\n        }\n\n        try {\n          // Walk through auth tree\n          await this.stepIterator(initialStep, options.authorization.handleStep, type, tree);\n          // See if OAuth tokens are being used\n          let tokens;\n          try {\n            tokens = await TokenStorage.get();\n          } catch (err) {\n            // No OAuth Tokens\n          }\n          if (hasIG) {\n            // Update URL with IDs and tokens for IG\n            options.url = addAuthzInfoToURL(options.url, authorizationJSON.advices, tokens);\n          } else {\n            // Update headers with IDs and tokens for REST API\n            options.init.headers = addAuthzInfoToHeaders(\n              options.init,\n              authorizationJSON.advices,\n              tokens,\n            );\n          }\n          // Retry original resource request\n          res = await this._request(options, false);\n        } catch (err) {\n          throw new Error(err);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  private static async setAuthHeaders(headers: Headers, forceRenew: boolean): Promise<Headers> {\n    let tokens;\n    try {\n      tokens = await TokenStorage.get();\n    } catch (err) {\n      // No OAuth Tokens\n    }\n\n    /**\n     * Condition to see if Auth is session based or OAuth token based\n     */\n    if (tokens && tokens.accessToken) {\n      // Access tokens are an OAuth artifact\n      tokens = await TokenManager.getTokens({ forceRenew });\n      // TODO: Temp fix; refactor this in next txn auth story\n      if (tokens && tokens.accessToken) {\n        headers.set('Authorization', `Bearer ${tokens.accessToken}`);\n      }\n    }\n    return headers;\n  }\n\n  private static async stepIterator(\n    res: Response,\n    handleStep: HandleStep,\n    type: string,\n    tree: string,\n  ): Promise<void> {\n    const jsonRes = await res.json();\n    const initialStep = new FRStep(jsonRes);\n\n    return new Promise(async (resolve, reject) => {\n      async function handleNext(step: FRStep): Promise<void> {\n        const input = await handleStep(step);\n        const output = await FRAuth.next(input, { type, tree });\n\n        if (output.type === StepType.LoginSuccess) {\n          resolve();\n        } else if (output.type === StepType.LoginFailure) {\n          reject('Authentication tree failure.');\n        } else {\n          handleNext(output);\n        }\n      }\n\n      handleNext(initialStep);\n    });\n  }\n\n  private static async _request(\n    options: HttpClientRequestOptions,\n    forceRenew: boolean,\n  ): Promise<Response> {\n    const { url, init, timeout } = options;\n    let headers = new Headers(init.headers || {});\n\n    if (!options.bypassAuthentication) {\n      headers = await this.setAuthHeaders(headers, forceRenew);\n    }\n    init.headers = headers;\n\n    let response;\n    try {\n      response = await withTimeout(fetch(url, init), timeout);\n    } catch (err) {\n      /**\n       * If the above fetch fails due to the following conditions:\n       *\n       * 1. Preflight\n       * 2. Authorization header\n       * 3. Redirection\n       *\n       * The request will need to be refetched as a \"simple request\".\n       * For more information, see:\n       * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Preflighted_requests_and_redirects\n       */\n\n      response = await withTimeout(fetch(url, { method: 'GET' }), timeout);\n    }\n    return response as Response;\n  }\n}\n\nexport default HttpClient;\nexport { HttpClientRequestOptions, RequiresNewTokenFn };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020-2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Auth from './auth';\nimport { CallbackType, ErrorCode } from './auth/enums';\nimport { Callback, NameValue, PolicyRequirement, Step, StepDetail } from './auth/interfaces';\nimport Config, { ConfigOptions, ValidConfigOptions } from './config';\nimport Dispatcher, { CallbackContainer, FREvent, Listener } from './event';\nimport FRAuth from './fr-auth';\nimport FRCallback from './fr-auth/callbacks';\nimport AttributeInputCallback from './fr-auth/callbacks/attribute-input-callback';\nimport ChoiceCallback from './fr-auth/callbacks/choice-callback';\nimport ConfirmationCallback from './fr-auth/callbacks/confirmation-callback';\nimport DeviceProfileCallback from './fr-auth/callbacks/device-profile-callback';\nimport { FRCallbackFactory } from './fr-auth/callbacks/factory';\nimport HiddenValueCallback from './fr-auth/callbacks/hidden-value-callback';\nimport KbaCreateCallback from './fr-auth/callbacks/kba-create-callback';\nimport MetadataCallback from './fr-auth/callbacks/metadata-callback';\nimport NameCallback from './fr-auth/callbacks/name-callback';\nimport PasswordCallback from './fr-auth/callbacks/password-callback';\nimport PollingWaitCallback from './fr-auth/callbacks/polling-wait-callback';\nimport ReCaptchaCallback from './fr-auth/callbacks/recaptcha-callback';\nimport RedirectCallback from './fr-auth/callbacks/redirect-callback';\nimport SelectIdPCallback, { IdPValue } from './fr-auth/callbacks/select-idp-callback';\nimport SuspendedTextOutputCallback from './fr-auth/callbacks/suspended-text-output-callback';\nimport TermsAndConditionsCallback from './fr-auth/callbacks/terms-and-conditions-callback';\nimport TextOutputCallback from './fr-auth/callbacks/text-output-callback';\n// eslint-disable-next-line max-len\nimport ValidatedCreatePasswordCallback from './fr-auth/callbacks/validated-create-password-callback';\n// eslint-disable-next-line max-len\nimport ValidatedCreateUsernameCallback from './fr-auth/callbacks/validated-create-username-callback';\nimport { StepType } from './fr-auth/enums';\nimport FRLoginFailure from './fr-auth/fr-login-failure';\nimport FRLoginSuccess from './fr-auth/fr-login-success';\nimport FRStep, { FRStepHandler } from './fr-auth/fr-step';\nimport { AuthResponse, FailureDetail } from './fr-auth/interfaces';\nimport FRDevice from './fr-device';\nimport FRPolicy, { MessageCreator, PolicyKey, ProcessedPropertyError } from './fr-policy';\nimport defaultMessageCreator from './fr-policy/message-creator';\nimport FRRecoveryCodes from './fr-recovery-codes';\nimport FRUI from './fr-ui';\nimport FRUser from './fr-user';\nimport FRWebAuthn, {\n  RelyingParty,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnOutcome,\n  WebAuthnRegistrationMetadata,\n  WebAuthnStepType,\n} from './fr-webauthn';\nimport HttpClient from './http-client';\nimport OAuth2Client, {\n  GetAuthorizationUrlOptions,\n  GetOAuth2TokensOptions,\n  OAuth2Tokens,\n  ResponseType,\n} from './oauth2-client';\nimport SessionManager from './session-manager';\nimport { Tokens } from './shared/interfaces';\nimport TokenManager, { GetTokensOptions } from './token-manager';\nimport TokenStorage from './token-storage';\nimport UserManager from './user-manager';\nimport Deferred from './util/deferred';\nimport PKCE from './util/pkce';\nimport LocalStorage from './util/storage';\n\nexport {\n  defaultMessageCreator,\n  AttributeInputCallback,\n  Auth,\n  AuthResponse,\n  Callback,\n  CallbackContainer,\n  CallbackType,\n  ChoiceCallback,\n  Config,\n  ConfigOptions,\n  ConfirmationCallback,\n  Deferred,\n  DeviceProfileCallback,\n  Dispatcher,\n  ErrorCode,\n  FailureDetail,\n  FRAuth,\n  FRCallback,\n  FRCallbackFactory,\n  FRDevice,\n  FREvent,\n  FRLoginFailure,\n  FRLoginSuccess,\n  FRPolicy,\n  FRRecoveryCodes,\n  FRStep,\n  FRStepHandler,\n  FRUI,\n  FRUser,\n  FRWebAuthn,\n  GetAuthorizationUrlOptions,\n  GetOAuth2TokensOptions,\n  GetTokensOptions,\n  HiddenValueCallback,\n  HttpClient,\n  IdPValue,\n  KbaCreateCallback,\n  Listener,\n  LocalStorage,\n  MessageCreator,\n  MetadataCallback,\n  NameCallback,\n  NameValue,\n  OAuth2Client,\n  OAuth2Tokens,\n  PasswordCallback,\n  PKCE,\n  PolicyKey,\n  PolicyRequirement,\n  PollingWaitCallback,\n  ProcessedPropertyError,\n  ReCaptchaCallback,\n  RedirectCallback,\n  RelyingParty,\n  ResponseType,\n  SelectIdPCallback,\n  SessionManager,\n  Step,\n  StepDetail,\n  StepType,\n  SuspendedTextOutputCallback,\n  TermsAndConditionsCallback,\n  TextOutputCallback,\n  TokenManager,\n  Tokens,\n  TokenStorage,\n  UserManager,\n  ValidatedCreatePasswordCallback,\n  ValidatedCreateUsernameCallback,\n  ValidConfigOptions,\n  WebAuthnAuthenticationMetadata,\n  WebAuthnCallbacks,\n  WebAuthnOutcome,\n  WebAuthnRegistrationMetadata,\n  WebAuthnStepType,\n};\n","/*\n * @forgerock/javascript-sdk\n *\n * enums.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * Specifies the type of OAuth flow to invoke.\n */\nenum ResponseType {\n  Code = 'code',\n  Token = 'token',\n}\n\nexport { ResponseType };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020-2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { ActionTypes } from '../config/enums';\nimport Config, { ConfigOptions } from '../config/index';\nimport { ConfigurablePaths } from '../config/interfaces';\nimport { StringDict } from '../shared/interfaces';\nimport { Noop } from '../shared/types';\nimport TokenStorage from '../token-storage';\nimport { isOkOr4xx } from '../util/http';\nimport PKCE from '../util/pkce';\nimport { withTimeout } from '../util/timeout';\nimport { getEndpointPath, resolve, stringify } from '../util/url';\nimport { ResponseType } from './enums';\nimport {\n  AccessTokenResponse,\n  GetAuthorizationUrlOptions,\n  GetOAuth2TokensOptions,\n  OAuth2Tokens,\n} from './interfaces';\nimport middlewareWrapper from '../util/middleware';\n\nconst allowedErrors = {\n  // AM error for consent requirement\n  AuthenticationConsentRequired: 'Authentication or consent required',\n  // Manual iframe error\n  AuthorizationTimeout: 'Authorization timed out',\n  // Chromium browser error\n  FailedToFetch: 'Failed to fetch',\n  // Mozilla browser error\n  NetworkError: 'NetworkError when attempting to fetch resource.',\n  // Webkit browser error\n  CORSError: 'Cross-origin redirection',\n};\n\n/**\n * OAuth 2.0 client.\n */\nabstract class OAuth2Client {\n  public static async createAuthorizeUrl(options: GetAuthorizationUrlOptions): Promise<string> {\n    const { clientId, redirectUri, scope } = Config.get(options);\n\n    const requestParams: StringDict<string | undefined> = {\n      ...options.query,\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      response_type: options.responseType,\n      scope,\n      state: options.state,\n    };\n\n    if (options.verifier) {\n      const challenge = await PKCE.createChallenge(options.verifier);\n      requestParams.code_challenge = challenge;\n      requestParams.code_challenge_method = 'S256';\n    }\n\n    const { url } = middlewareWrapper(\n      {\n        url: new URL(this.getUrl('authorize', requestParams, options)),\n        init: {},\n      },\n      ActionTypes.Authorize,\n    );\n    return url.toString();\n  }\n\n  /**\n   * Calls the authorize URL with an iframe. If successful,\n   * it returns the callback URL with authentication code,\n   * optionally using PKCE.\n   * Method renamed in v3.\n   * Original Name: getAuthorizeUrl\n   * New Name: getAuthCodeByIframe\n   */\n  public static async getAuthCodeByIframe(options: GetAuthorizationUrlOptions): Promise<string> {\n    const url = await this.createAuthorizeUrl(options);\n    const { serverConfig } = Config.get(options);\n\n    return new Promise((resolve, reject) => {\n      const iframe = document.createElement('iframe');\n\n      // Define these here to avoid linter warnings\n      const noop: Noop = () => {\n        return;\n      };\n      let onLoad: Noop = noop;\n      let cleanUp: Noop = noop;\n      let timeout = 0;\n\n      cleanUp = (): void => {\n        window.clearTimeout(timeout);\n        iframe.removeEventListener('load', onLoad);\n        iframe.remove();\n      };\n\n      onLoad = (): void => {\n        if (iframe.contentWindow) {\n          const newHref = iframe.contentWindow.location.href;\n          if (this.containsAuthCode(newHref)) {\n            cleanUp();\n            resolve(newHref);\n          } else if (this.containsAuthError(newHref)) {\n            cleanUp();\n            resolve(newHref);\n          }\n        }\n      };\n\n      timeout = window.setTimeout(() => {\n        cleanUp();\n        reject(new Error(allowedErrors.AuthorizationTimeout));\n      }, serverConfig.timeout);\n\n      iframe.style.display = 'none';\n      iframe.addEventListener('load', onLoad);\n      document.body.appendChild(iframe);\n      iframe.src = url;\n    });\n  }\n\n  /**\n   * Exchanges an authorization code for OAuth tokens.\n   */\n  public static async getOAuth2Tokens(options: GetOAuth2TokensOptions): Promise<OAuth2Tokens> {\n    const { clientId, redirectUri } = Config.get(options);\n\n    const requestParams: StringDict<string | undefined> = {\n      client_id: clientId,\n      code: options.authorizationCode,\n      grant_type: 'authorization_code',\n      redirect_uri: redirectUri,\n    };\n\n    if (options.verifier) {\n      requestParams.code_verifier = options.verifier;\n    }\n\n    const body = stringify(requestParams);\n    const init = {\n      body,\n      headers: {\n        'content-length': body.length.toString(),\n        'content-type': 'application/x-www-form-urlencoded',\n      },\n      method: 'POST',\n    };\n\n    const response = await this.request('accessToken', undefined, false, init, options);\n    const responseBody = await this.getBody<unknown>(response);\n\n    if (response.status !== 200) {\n      const message =\n        typeof responseBody === 'string'\n          ? `Expected 200, received ${response.status}`\n          : this.parseError(responseBody as StringDict<unknown>);\n      throw new Error(message);\n    }\n\n    const responseObject = responseBody as AccessTokenResponse;\n    if (!responseObject.access_token) {\n      throw new Error('Access token not found in response');\n    }\n\n    return {\n      accessToken: responseObject.access_token,\n      idToken: responseObject.id_token,\n      refreshToken: responseObject.refresh_token,\n    };\n  }\n\n  /**\n   * Gets OIDC user information.\n   */\n  public static async getUserInfo(options?: ConfigOptions): Promise<unknown> {\n    const response = await this.request('userInfo', undefined, true, undefined, options);\n    if (response.status !== 200) {\n      throw new Error(`Failed to get user info; received ${response.status}`);\n    }\n\n    const json = await response.json();\n    return json;\n  }\n\n  /**\n   * Invokes the OIDC end session endpoint.\n   */\n  public static async endSession(options?: ConfigOptions): Promise<Response> {\n    const { idToken } = await TokenStorage.get();\n\n    const query: StringDict<string | undefined> = {};\n    if (idToken) {\n      query.id_token_hint = idToken;\n    }\n\n    const response = await this.request('endSession', query, true, undefined, options);\n    if (!isOkOr4xx(response)) {\n      throw new Error(`Failed to end session; received ${response.status}`);\n    }\n    return response;\n  }\n\n  /**\n   * Immediately revokes the stored access token.\n   */\n  public static async revokeToken(options?: ConfigOptions): Promise<Response> {\n    const { clientId } = Config.get(options);\n    const { accessToken } = await TokenStorage.get();\n\n    const init: RequestInit = {\n      body: stringify({ client_id: clientId, token: accessToken }),\n      credentials: 'include',\n      headers: { 'content-type': 'application/x-www-form-urlencoded' },\n      method: 'POST',\n    };\n\n    const response = await this.request('revoke', undefined, false, init, options);\n    if (!isOkOr4xx(response)) {\n      throw new Error(`Failed to revoke token; received ${response.status}`);\n    }\n    return response;\n  }\n\n  private static async request(\n    endpoint: ConfigurablePaths,\n    query?: StringDict<string | undefined>,\n    includeToken?: boolean,\n    init?: RequestInit,\n    options?: ConfigOptions,\n  ): Promise<Response> {\n    const { serverConfig } = Config.get(options);\n    const url = this.getUrl(endpoint, query, options);\n\n    const getActionType = (endpoint: ConfigurablePaths): ActionTypes => {\n      switch (endpoint) {\n        case 'accessToken':\n          return ActionTypes.ExchangeToken;\n        case 'endSession':\n          return ActionTypes.Logout;\n        case 'revoke':\n          return ActionTypes.RevokeToken;\n        default:\n          return ActionTypes.UserInfo;\n      }\n    };\n\n    init = init || ({} as RequestInit);\n\n    if (includeToken) {\n      const { accessToken } = await TokenStorage.get();\n      init.credentials = 'include';\n      init.headers = (init.headers || new Headers()) as Headers;\n      init.headers.set('authorization', `Bearer ${accessToken}`);\n    }\n    const req = middlewareWrapper({ url: new URL(url), init }, getActionType(endpoint));\n    return await withTimeout(fetch(req.url.toString(), req.init), serverConfig.timeout);\n  }\n\n  private static containsAuthCode(url: string | null): boolean {\n    return !!url && /code=([^&]+)/.test(url);\n  }\n\n  private static containsAuthError(url: string | null): boolean {\n    return !!url && /error=([^&]+)/.test(url);\n  }\n\n  private static async getBody<T>(response: Response): Promise<T | string> {\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.indexOf('application/json') > -1) {\n      return await response.json();\n    }\n    return await response.text();\n  }\n\n  private static parseError(json: StringDict<unknown>): string | undefined {\n    if (json) {\n      if (json.error && json.error_description) {\n        return `${json.error}: ${json.error_description}`;\n      }\n      if (json.code && json.message) {\n        return `${json.code}: ${json.message}`;\n      }\n    }\n    return undefined;\n  }\n\n  private static getUrl(\n    endpoint: ConfigurablePaths,\n    query?: StringDict<string | undefined>,\n    options?: ConfigOptions,\n  ): string {\n    const { realmPath, serverConfig } = Config.get(options);\n    const path = getEndpointPath(endpoint, realmPath, serverConfig.paths);\n    let url = resolve(serverConfig.baseUrl, path);\n    if (query) {\n      url += `?${stringify(query)}`;\n    }\n    return url;\n  }\n}\n\nexport default OAuth2Client;\nexport {\n  allowedErrors,\n  GetAuthorizationUrlOptions,\n  GetOAuth2TokensOptions,\n  OAuth2Tokens,\n  ResponseType,\n};\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Config, { ConfigOptions } from '../config/index';\nimport { REQUESTED_WITH } from '../shared/constants';\nimport { isOkOr4xx } from '../util/http';\nimport { withTimeout } from '../util/timeout';\nimport { ActionTypes } from '../config/enums';\nimport middlewareWrapper from '../util/middleware';\nimport { getEndpointPath, resolve } from '../util/url';\n\n/**\n * Provides access to the session management API.\n */\nabstract class SessionManager {\n  /**\n   * Ends the current session.\n   */\n  public static async logout(options?: ConfigOptions): Promise<Response> {\n    const { realmPath, serverConfig } = Config.get(options);\n    const init: RequestInit = {\n      credentials: 'include',\n      headers: {\n        'accept-api-version': 'protocol=1.0,resource=2.0',\n        'x-requested-with': REQUESTED_WITH,\n      },\n      method: 'POST',\n    };\n\n    const path = `${getEndpointPath('sessions', realmPath, serverConfig.paths)}?_action=logout`;\n    const url = resolve(serverConfig.baseUrl, path);\n\n    const req = middlewareWrapper({ url: new URL(url), init }, ActionTypes.Logout);\n    const response = await withTimeout(fetch(req.url.toString(), req.init), serverConfig.timeout);\n    if (!isOkOr4xx(response)) {\n      throw new Error(`Failed to log out; received ${response.status}`);\n    }\n    return response;\n  }\n}\n\nexport default SessionManager;\n","/*\n * @forgerock/javascript-sdk\n *\n * constants.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * @module\n * @ignore\n * These are private constants\n */\nconst REQUESTED_WITH = 'forgerock-sdk';\n\nexport { REQUESTED_WITH };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020-2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Config, { ConfigOptions } from '../config';\nimport OAuth2Client, { allowedErrors, OAuth2Tokens, ResponseType } from '../oauth2-client';\nimport { StringDict, Tokens } from '../shared/interfaces';\nimport TokenStorage from '../token-storage';\nimport PKCE from '../util/pkce';\nimport { withTimeout } from '../util/timeout';\nimport { parseQuery } from '../util/url';\n\ninterface GetTokensOptions extends ConfigOptions {\n  forceRenew?: boolean;\n  login?: 'embedded' | 'redirect' | undefined;\n  query?: StringDict<string>;\n}\n\nabstract class TokenManager {\n  /**\n   * Token Manager class that provides high-level abstraction for Authorization Code flow,\n   * PKCE value generation, token exchange and token storage.\n   *\n   * Supports both embedded authentication as well as external authentication via redirects\n   *\n   Example 1:\n\n   ```js\n   const tokens = forgerock.TokenManager.getTokens({\n     forceRenew: true, // If you want to get new tokens, despite existing ones\n     login: 'embedded', // If user authentication is handled in-app\n     support: 'legacy', // Set globally or locally; `\"legacy\"` or `undefined` will use iframe\n     serverConfig: {\n       timeout: 5000, // If using \"legacy\", use a short timeout to catch error\n     },\n   });\n   ```\n\n   Example 2:\n\n   ```js\n   const tokens = forgerock.TokenManager.getTokens({\n     forceRenew: false, // Will immediately return stored tokens, if they exist\n     login: 'redirect', // If user authentication is handled in external Web app\n     support: 'modern', // Set globally or locally; `\"modern\"` will use native fetch\n   });\n   ```\n\n   Example 3:\n\n   ```js\n   const tokens = forgerock.TokenManager.getTokens({\n     query: {\n       code: 'lFJQYdoQG1u7nUm8 ... ', // Authorization code from redirect URL\n       state: 'MTY2NDkxNTQ2Nde3D ... ', // State from redirect URL\n     },\n   });\n   ```\n   */\n  public static async getTokens(options?: GetTokensOptions): Promise<OAuth2Tokens | void> {\n    let tokens: OAuth2Tokens | null = null;\n    const { clientId, serverConfig, support } = Config.get(options as ConfigOptions);\n\n    /**\n     * First, let's see if tokens exist locally\n     */\n    try {\n      tokens = await TokenStorage.get();\n    } catch (error) {\n      console.info('No stored tokens available', error);\n    }\n\n    /**\n     * If tokens are stored and no option for `forceRenew` or `query` object with `code`,\n     * immediately return the stored tokens\n     */\n    if (tokens && !options?.forceRenew && !options?.query?.code) {\n      return tokens;\n    }\n\n    /**\n     * If we are still here because of forceRenew or we have an authorization code,\n     * revoke and delete existing tokens to prepare for the new ones\n     */\n    if (tokens) {\n      try {\n        await OAuth2Client.revokeToken(options);\n        await TokenManager.deleteTokens();\n      } catch (error) {\n        console.warn('Existing tokens could not be revoked or deleted', error);\n      }\n    }\n\n    /**\n     * If authorization code and state are passed in, call token exchange\n     * and return acquired tokens\n     */\n    if (options?.query?.code && options?.query?.state) {\n      const storedString = window.sessionStorage.getItem(clientId as string);\n      window.sessionStorage.removeItem(clientId as string);\n      const storedValues: { state: string; verifier: string } = JSON.parse(storedString as string);\n\n      return await this.tokenExchange(options, storedValues);\n    }\n\n    /**\n     * If we are here, then we are just beginning the auth code flow,\n     * so let's generate authorize PKCE values and URL\n     */\n    const verifier = PKCE.createVerifier();\n    const state = PKCE.createState();\n    const authorizeUrlOptions = { ...options, responseType: ResponseType.Code, state, verifier };\n    const authorizeUrl = await OAuth2Client.createAuthorizeUrl(authorizeUrlOptions);\n\n    /**\n     * Attempt to call the authorize URL to retrieve authorization code\n     */\n    try {\n      let parsedUrl;\n\n      // Check expected browser support\n      if (support === 'legacy' || support === undefined) {\n        // To support legacy browsers, iframe works best with short timeout\n        parsedUrl = new URL(await OAuth2Client.getAuthCodeByIframe(authorizeUrlOptions));\n      } else {\n        // Using modern `fetch` provides better redirect and error handling\n        // Downside is IE11 is not supported, *even* with the fetch polyfill\n        const response = await withTimeout(\n          fetch(authorizeUrl, {\n            credentials: 'include',\n            mode: 'cors',\n          }),\n          serverConfig.timeout,\n        );\n\n        parsedUrl = new URL(response.url);\n      }\n\n      // Throw if we have an error param or have no authorization code\n      if (parsedUrl.searchParams.get('error')) {\n        throw Error(`${parsedUrl.searchParams.get('error_description')}`);\n      } else if (!parsedUrl.searchParams.get('code')) {\n        throw Error(allowedErrors.AuthenticationConsentRequired);\n      }\n\n      const parsedQuery = parseQuery(parsedUrl.toString());\n\n      if (!options) {\n        options = {};\n      }\n      options.query = parsedQuery;\n    } catch (err) {\n      // If authorize request fails, handle according to `login` type\n      if (options?.login !== 'redirect') {\n        // Throw for any error if login is NOT of type \"redirect\"\n        throw err;\n      }\n\n      // Check if error is not one of our allowed errors\n      if (\n        allowedErrors.AuthenticationConsentRequired !== err.message &&\n        allowedErrors.AuthorizationTimeout !== err.message &&\n        allowedErrors.FailedToFetch !== err.message &&\n        allowedErrors.NetworkError !== err.message &&\n        // Safari has a very long error message, so we check for a substring\n        !err.message.includes(allowedErrors.CORSError)\n      ) {\n        // Throw if the error is NOT an explicitly allowed error along with redirect of true\n        // as that is a normal response and just requires a redirect\n        throw err;\n      }\n\n      // Since `login` is configured for \"redirect\", store authorize values and redirect\n      window.sessionStorage.setItem(clientId as string, JSON.stringify(authorizeUrlOptions));\n      return window.location.assign(authorizeUrl);\n    }\n\n    /**\n     * Exchange authorization code for tokens\n     */\n    return await this.tokenExchange(options, { state, verifier });\n  }\n\n  public static async deleteTokens(): Promise<void> {\n    await TokenStorage.remove();\n  }\n\n  private static async tokenExchange(\n    options: GetTokensOptions,\n    stored: { state: string; verifier: string },\n  ): Promise<Tokens> {\n    /**\n     * Ensure incoming state and stored state are equal and authorization code exists\n     */\n    if (options.query?.state !== stored.state) {\n      throw new Error('State mismatch');\n    }\n    if (!options.query?.code || Array.isArray(options.query?.code)) {\n      throw new Error('Failed to acquire authorization code');\n    }\n\n    /**\n     * Generate token exchange options\n     */\n    const authorizationCode = options.query?.code;\n    const verifier = stored.verifier;\n    const getTokensOptions = { ...options, authorizationCode, verifier };\n    const tokens = await OAuth2Client.getOAuth2Tokens(getTokensOptions);\n\n    if (!tokens || !tokens.accessToken) {\n      throw new Error('Unable to exchange authorization for tokens');\n    }\n\n    try {\n      await TokenStorage.set(tokens);\n    } catch (error) {\n      console.error('Failed to store tokens', error);\n    }\n\n    return tokens;\n  }\n}\n\nexport default TokenManager;\nexport { GetTokensOptions };\n","/*\n * @forgerock/javascript-sdk\n *\n * constants.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * @module\n * @ignore\n * These are private constants for TokenStorage\n */\nconst DB_NAME = 'forgerock-sdk';\n\n/** @hidden */\nconst TOKEN_KEY = 'tokens';\n\nexport { DB_NAME, TOKEN_KEY };\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020-2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Config from '../config/index';\nimport { TokenStoreObject } from '../config/interfaces';\nimport IndexedDBWrapper from './indexed-db';\nimport LocalStorageWrapper from './local-storage';\nimport SessionStorageWrapper from './session-storage';\nimport { Tokens } from '../shared/interfaces';\n\n/**\n * Provides access to the token storage API.\n * The type of storage (localStorage, sessionStorage, etc) can be configured\n * through `tokenStore` object on the SDK configuration.\n */\nabstract class TokenStorage {\n  /**\n   * Gets stored tokens.\n   */\n  public static async get(): Promise<Tokens> {\n    const { clientId, tokenStore } = this.getClientConfig();\n\n    if (tokenStore === 'sessionStorage') {\n      return await SessionStorageWrapper.get(clientId);\n    } else if (tokenStore === 'localStorage') {\n      return await LocalStorageWrapper.get(clientId);\n    } else if (tokenStore === 'indexedDB') {\n      return await IndexedDBWrapper.get(clientId);\n    } else if (tokenStore && tokenStore.get) {\n      // User supplied token store\n      return await tokenStore.get(clientId);\n    }\n    // if tokenStore is undefined, default to localStorage\n    return await LocalStorageWrapper.get(clientId);\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(tokens: Tokens): Promise<void> {\n    const { clientId, tokenStore } = this.getClientConfig();\n\n    if (tokenStore === 'sessionStorage') {\n      return await SessionStorageWrapper.set(clientId, tokens);\n    } else if (tokenStore === 'localStorage') {\n      return await LocalStorageWrapper.set(clientId, tokens);\n    } else if (tokenStore === 'indexedDB') {\n      return await IndexedDBWrapper.set(clientId, tokens);\n    } else if (tokenStore && tokenStore.set) {\n      // User supplied token store\n      return await tokenStore.set(clientId, tokens);\n    }\n    // if tokenStore is undefined, default to localStorage\n    return await LocalStorageWrapper.set(clientId, tokens);\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(): Promise<void> {\n    const { clientId, tokenStore } = this.getClientConfig();\n\n    if (tokenStore === 'sessionStorage') {\n      return await SessionStorageWrapper.remove(clientId);\n    } else if (tokenStore === 'localStorage') {\n      return await LocalStorageWrapper.remove(clientId);\n    } else if (tokenStore === 'indexedDB') {\n      return await IndexedDBWrapper.remove(clientId);\n    } else if (tokenStore && tokenStore.remove) {\n      // User supplied token store\n      return await tokenStore.remove(clientId);\n    }\n    // if tokenStore is undefined, default to localStorage\n    return await LocalStorageWrapper.remove(clientId);\n  }\n\n  private static getClientConfig(): {\n    clientId: string;\n    tokenStore: TokenStoreObject | 'indexedDB' | 'sessionStorage' | 'localStorage' | undefined;\n  } {\n    const { clientId, tokenStore } = Config.get();\n    if (!clientId) {\n      throw new Error('clientId is required to manage token storage');\n    }\n    return { clientId, tokenStore };\n  }\n}\n\nexport default TokenStorage;\n","/*\n * @forgerock/javascript-sdk\n *\n * indexed-db.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { Tokens } from '../shared/interfaces';\nimport { DB_NAME, TOKEN_KEY } from './constants';\nimport { TokenDbEvent } from './interfaces';\n\n/**\n * Provides wrapper for tokens with IndexedDB.\n */\nabstract class IndexedDBWrapper {\n  /**\n   * Retrieve tokens.\n   */\n  public static async get(clientId: string): Promise<Tokens> {\n    return new Promise((resolve, reject) => {\n      const onError = (): void => reject();\n\n      const openReq = window.indexedDB.open(DB_NAME);\n\n      openReq.onsuccess = (): void => {\n        if (!openReq.result.objectStoreNames.contains(clientId)) {\n          openReq.result.close();\n          return reject('Client ID not found');\n        }\n\n        const getReq = openReq.result\n          .transaction(clientId, 'readonly')\n          .objectStore(clientId)\n          .get(TOKEN_KEY);\n\n        getReq.onsuccess = (event: TokenDbEvent): void => {\n          if (!event || !event.target) {\n            throw new Error('Missing storage event target');\n          }\n          openReq.result.close();\n          resolve(event.target.result as Tokens);\n        };\n\n        getReq.onerror = onError;\n      };\n\n      openReq.onupgradeneeded = (): void => {\n        openReq.result.close();\n        reject('IndexedDB upgrade needed');\n      };\n\n      openReq.onerror = onError;\n    });\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(clientId: string, tokens: Tokens): Promise<void> {\n    return new Promise((resolve, reject) => {\n      let openReq = window.indexedDB.open(DB_NAME);\n\n      const onSetSuccess = (): void => {\n        openReq.result.close();\n        resolve();\n      };\n\n      const onError = (): void => reject();\n\n      const onUpgradeNeeded = (): void => {\n        openReq.result.createObjectStore(clientId);\n      };\n\n      const onOpenSuccess = (): void => {\n        if (!openReq.result.objectStoreNames.contains(clientId)) {\n          const version = openReq.result.version + 1;\n          openReq.result.close();\n\n          openReq = window.indexedDB.open(DB_NAME, version);\n          openReq.onupgradeneeded = onUpgradeNeeded;\n          openReq.onsuccess = onOpenSuccess;\n          openReq.onerror = onError;\n          return;\n        }\n\n        const txnReq = openReq.result.transaction(clientId, 'readwrite');\n        txnReq.onerror = onError;\n        const objectStore = txnReq.objectStore(clientId);\n        const putReq = objectStore.put(tokens, TOKEN_KEY);\n        putReq.onsuccess = onSetSuccess;\n        putReq.onerror = onError;\n      };\n\n      openReq.onupgradeneeded = onUpgradeNeeded;\n      openReq.onsuccess = onOpenSuccess;\n      openReq.onerror = onError;\n    });\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(clientId: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const onError = (): void => reject();\n\n      const openReq = window.indexedDB.open(DB_NAME);\n\n      openReq.onsuccess = (): void => {\n        if (!openReq.result.objectStoreNames.contains(clientId)) {\n          return resolve();\n        }\n\n        const removeReq = openReq.result\n          .transaction(clientId, 'readwrite')\n          .objectStore(clientId)\n          .delete(TOKEN_KEY);\n\n        removeReq.onsuccess = (): void => {\n          resolve();\n        };\n\n        removeReq.onerror = onError;\n      };\n\n      openReq.onerror = onError;\n    });\n  }\n}\n\nexport default IndexedDBWrapper;\n","/*\n * @forgerock/javascript-sdk\n *\n * local-storage.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { Tokens } from '../shared/interfaces';\nimport { DB_NAME } from './constants';\n\n/**\n * Provides wrapper for tokens with localStorage.\n */\nabstract class LocalStorageWrapper {\n  /**\n   * Retrieve tokens.\n   */\n  public static async get(clientId: string): Promise<Tokens> {\n    const tokenString = localStorage.getItem(`${DB_NAME}-${clientId}`);\n\n    try {\n      return Promise.resolve(JSON.parse(tokenString || ''));\n    } catch (err) {\n      console.warn(\n        'Could not parse token from localStorage. This could be due to accessing a removed token',\n      );\n      // Original behavior had an untyped return of undefined for no token\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return undefined;\n    }\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(clientId: string, tokens: Tokens): Promise<void> {\n    const tokenString = JSON.stringify(tokens);\n    localStorage.setItem(`${DB_NAME}-${clientId}`, tokenString);\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(clientId: string): Promise<void> {\n    localStorage.removeItem(`${DB_NAME}-${clientId}`);\n  }\n}\n\nexport default LocalStorageWrapper;\n","/*\n * @forgerock/javascript-sdk\n *\n * session-storage.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { Tokens } from '../shared/interfaces';\nimport { DB_NAME } from './constants';\n\n/**\n * Provides wrapper for tokens with sessionStorage.\n */\nabstract class SessionStorageWrapper {\n  /**\n   * Retrieve tokens.\n   */\n  public static async get(clientId: string): Promise<Tokens> {\n    const tokenString = sessionStorage.getItem(`${DB_NAME}-${clientId}`);\n\n    try {\n      return Promise.resolve(JSON.parse(tokenString || ''));\n    } catch (err) {\n      console.warn(\n        'Could not parse token from sessionStorage. This could be due to accessing a removed token',\n      );\n      // Original behavior had an untyped return of undefined for no token\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return undefined;\n    }\n  }\n\n  /**\n   * Saves tokens.\n   */\n  public static async set(clientId: string, tokens: Tokens): Promise<void> {\n    const tokenString = JSON.stringify(tokens);\n    sessionStorage.setItem(`${DB_NAME}-${clientId}`, tokenString);\n  }\n\n  /**\n   * Removes stored tokens.\n   */\n  public static async remove(clientId: string): Promise<void> {\n    sessionStorage.removeItem(`${DB_NAME}-${clientId}`);\n  }\n}\n\nexport default SessionStorageWrapper;\n","/*\n * @forgerock/javascript-sdk\n *\n * index.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport OAuth2Client from '../oauth2-client';\n\n/**\n * Provides access to the current user's profile.\n */\nabstract class UserManager {\n  /**\n   * Gets the current user's profile.\n   */\n  public static getCurrentUser(): Promise<unknown> {\n    return OAuth2Client.getUserInfo();\n  }\n}\n\nexport default UserManager;\n","/*\n * @forgerock/javascript-sdk\n *\n * deferred.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * Implementation of the Deferred API to simplify handling of Promises.\n */\nclass Deferred<T> {\n  public promise: Promise<T>;\n  public resolve!: (value: T) => void;\n  public reject!: (reason: unknown) => void;\n\n  constructor() {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n\nexport default Deferred;\n","/*\n * @forgerock/javascript-sdk\n *\n * http.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * @module\n * @ignore\n * These are private utility functions\n */\nfunction isOkOr4xx(response: Response): boolean {\n  return response.ok || Math.floor(response.status / 100) === 4;\n}\n\nexport { isOkOr4xx };\n","/*\n * @forgerock/javascript-sdk\n *\n * middleware.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport Config from '../config';\nimport { RequestObj } from '../config/interfaces';\nimport { ActionTypes } from '../config/enums';\n\n/**\n * @function middlewareWrapper - A \"Node\" and \"Redux\" style middleware that is called just before\n * the request is made from the SDK. This allows you access to the request for modification.\n * @param request - A request object container the URL and the Request Init object\n * @param type - A \"Redux\" style type that contains the serialized action\n * @param payload - The payload of the action that can contain metadata\n */\n// eslint-disable-next-line\nfunction middlewareWrapper(request: RequestObj, type: ActionTypes, payload?: any): RequestObj {\n  const { middleware } = Config.get();\n\n  if (!Array.isArray(middleware)) {\n    return request;\n  }\n  // no mutation and no reassignment\n  const action = Object.freeze({ type, payload });\n  // Copy middleware so the `shift` below doesn't mutate source\n  const mwareCopy = middleware.map((fn) => fn);\n\n  function iterator(): RequestObj {\n    const next = mwareCopy.shift();\n    next && next(request, action, iterator);\n    return request;\n  }\n\n  return iterator();\n}\n\nexport default middlewareWrapper;\n","/*\n * @forgerock/javascript-sdk\n *\n * pkce.ts\n *\n * Copyright (c) 2020-2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * Helper class for generating verifier, challenge and state strings used for\n * Proof Key for Code Exchange (PKCE).\n */\nabstract class PKCE {\n  /**\n   * Creates a random state.\n   */\n  public static createState(): string {\n    return this.createRandomString(16);\n  }\n\n  /**\n   * Creates a random verifier.\n   */\n  public static createVerifier(): string {\n    return this.createRandomString(32);\n  }\n\n  /**\n   * Creates a SHA-256 hash of the verifier.\n   *\n   * @param verifier The verifier to hash\n   */\n  public static async createChallenge(verifier: string): Promise<string> {\n    const sha256 = await this.sha256(verifier);\n    const challenge = this.base64UrlEncode(sha256);\n    return challenge;\n  }\n\n  /**\n   * Creates a base64 encoded, URL-friendly version of the specified array.\n   *\n   * @param array The array of numbers to encode\n   */\n  public static base64UrlEncode(array: Uint8Array): string {\n    const numbers = Array.prototype.slice.call(array);\n    const ascii = window.btoa(String.fromCharCode.apply(null, numbers));\n    const urlEncoded = ascii.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n    return urlEncoded;\n  }\n\n  /**\n   * Creates a SHA-256 hash of the specified string.\n   *\n   * @param value The string to hash\n   */\n  public static async sha256(value: string): Promise<Uint8Array> {\n    const uint8Array = new TextEncoder().encode(value);\n    const hashBuffer = await window.crypto.subtle.digest('SHA-256', uint8Array);\n    const hashArray = new Uint8Array(hashBuffer);\n    return hashArray;\n  }\n  /**\n   * Creates a random string.\n   *\n   * @param size The number for entropy (default: 32)\n   */\n  private static createRandomString(num = 32): string {\n    const random = new Uint8Array(num);\n    window.crypto.getRandomValues(random);\n    return btoa(random.join('')).replace(/[^a-zA-Z0-9]+/, '');\n  }\n}\n\nexport default PKCE;\n","/*\n * @forgerock/javascript-sdk\n *\n * realm.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/** @hidden */\nfunction getRealmUrlPath(realmPath?: string): string {\n  // Split the path and scrub segments\n  const names = (realmPath || '')\n    .split('/')\n    .map((x) => x.trim())\n    .filter((x) => x !== '');\n\n  // Ensure 'root' is the first realm\n  if (names[0] !== 'root') {\n    names.unshift('root');\n  }\n\n  // Concatenate into a URL path\n  const urlPath = names.map((x) => `realms/${x}`).join('/');\n  return urlPath;\n}\n\nexport { getRealmUrlPath };\n","/*\n * @forgerock/javascript-sdk\n *\n * storage.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/** @hidden */\nclass LocalStorage {\n  private storage: Storage;\n  constructor(persist = false) {\n    this.storage = persist ? window.localStorage : window.sessionStorage;\n  }\n\n  public get<T>(key: string): T | undefined {\n    const value = this.storage.getItem(key);\n    if (!value) {\n      return undefined;\n    }\n\n    return JSON.parse(value);\n  }\n\n  public set<T>(key: string, value: T): void {\n    this.storage.setItem(key, JSON.stringify(value));\n  }\n\n  public remove(key: string): void {\n    this.storage.removeItem(key);\n  }\n}\n\nexport default LocalStorage;\n","/*\n * @forgerock/javascript-sdk\n *\n * strings.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\n/**\n * @module\n * @ignore\n * These are private utility functions\n */\nexport function plural(n: number, singularText: string, pluralText?: string): string {\n  if (n === 1) {\n    return singularText;\n  }\n  return pluralText !== undefined ? pluralText : singularText + 's';\n}\n","/*\n * @forgerock/javascript-sdk\n *\n * timeout.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { DEFAULT_TIMEOUT } from '../config';\n\n/**\n * @module\n * @ignore\n * These are private utility functions\n */\nfunction withTimeout<T>(promise: Promise<T>, timeout: number = DEFAULT_TIMEOUT): Promise<T> {\n  const effectiveTimeout = timeout || DEFAULT_TIMEOUT;\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      window.setTimeout(() => reject(new Error('Timeout')), effectiveTimeout),\n    ),\n  ]);\n}\n\nexport { withTimeout };\n","/*\n * @forgerock/javascript-sdk\n *\n * url.ts\n *\n * Copyright (c) 2020 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\n\nimport { ConfigurablePaths, CustomPathConfig } from '../config/interfaces';\nimport { StringDict } from '../shared/interfaces';\nimport { getRealmUrlPath } from '../util/realm';\n\n/**\n * Returns the base URL including protocol, hostname and any non-standard port.\n * The returned URL does not include a trailing slash.\n */\nfunction getBaseUrl(url: URL): string {\n  const isNonStandardPort =\n    (url.protocol === 'http:' && ['', '80'].indexOf(url.port) === -1) ||\n    (url.protocol === 'https:' && ['', '443'].indexOf(url.port) === -1);\n  const port = isNonStandardPort ? `:${url.port}` : '';\n  const baseUrl = `${url.protocol}//${url.hostname}${port}`;\n  return baseUrl;\n}\n\nfunction getEndpointPath(\n  endpoint: ConfigurablePaths,\n  realmPath?: string,\n  customPaths?: CustomPathConfig,\n): string {\n  const realmUrlPath = getRealmUrlPath(realmPath);\n  const defaultPaths = {\n    authenticate: `json/${realmUrlPath}/authenticate`,\n    authorize: `oauth2/${realmUrlPath}/authorize`,\n    accessToken: `oauth2/${realmUrlPath}/access_token`,\n    endSession: `oauth2/${realmUrlPath}/connect/endSession`,\n    userInfo: `oauth2/${realmUrlPath}/userinfo`,\n    revoke: `oauth2/${realmUrlPath}/token/revoke`,\n    sessions: `json/${realmUrlPath}/sessions/`,\n  };\n  if (customPaths && customPaths[endpoint]) {\n    // TypeScript is not correctly reading the condition above\n    // It's thinking that customPaths[endpoint] may result in undefined\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return customPaths[endpoint];\n  } else {\n    return defaultPaths[endpoint];\n  }\n}\n\nfunction resolve(baseUrl: string, path: string): string {\n  const url = new URL(baseUrl);\n\n  if (path.startsWith('/')) {\n    return `${getBaseUrl(url)}${path}`;\n  }\n\n  const basePath = url.pathname.split('/');\n  const destPath = path.split('/').filter((x) => !!x);\n  const newPath = [...basePath.slice(0, -1), ...destPath].join('/');\n\n  return `${getBaseUrl(url)}${newPath}`;\n}\n\nfunction parseQuery(fullUrl: string): StringDict<string> {\n  const url = new URL(fullUrl);\n  const query: StringDict<string> = {};\n  url.searchParams.forEach((v, k) => (query[k] = v));\n  return query;\n}\n\nfunction stringify(data: StringDict<string | undefined>): string {\n  const pairs = [];\n  for (const k in data) {\n    if (data[k]) {\n      pairs.push(k + '=' + encodeURIComponent(data[k] as string));\n    }\n  }\n  return pairs.join('&');\n}\n\nexport { getBaseUrl, getEndpointPath, parseQuery, resolve, stringify };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3607);\n"],"sourceRoot":""}